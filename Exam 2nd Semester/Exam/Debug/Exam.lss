
Exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800130  00800130  00000f36  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200d  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b96  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa1  00000000  00000000  00003dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  00004d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  00005244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001288  00000000  00000000  00005a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00006cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  9e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_write_PCF8574>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8e e4       	ldi	r24, 0x4E	; 78
  ac:	0e 94 41 03 	call	0x682	; 0x682 <i2c_start_wait>
  b0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
  b4:	8c 2b       	or	r24, r28
  b6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <i2c_write>
  ba:	0e 94 69 03 	call	0x6d2	; 0x6d2 <i2c_stop>
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <LCD_pulse_enable_neg>:
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_PCF8574>
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_pulse_enable_neg+0xc>
  d2:	00 00       	nop
  d4:	8c 2f       	mov	r24, r28
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_PCF8574>
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_pulse_enable_neg+0x1e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_pulse_enable_neg+0x24>
  e6:	00 00       	nop
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <LCD_write4bits>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	cd 7f       	andi	r28, 0xFD	; 253
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_write_PCF8574>
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_pulse_enable_neg>
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <LCD_send>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
 10a:	c4 60       	ori	r28, 0x04	; 4
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	8c 2b       	or	r24, r28
 110:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 114:	8d 2f       	mov	r24, r29
 116:	82 95       	swap	r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	8c 2b       	or	r24, r28
 11c:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <LCD_write_char>:
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
 12c:	08 95       	ret

0000012e <putchr>:
 12e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_write_char>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <LCD_clear>:
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	86 e7       	ldi	r24, 0x76	; 118
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <LCD_clear+0xe>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_clear+0x18>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_set_cursor>:
	_delay_us(30000);  // this command takes a long time!
	#endif
}

void LCD_set_cursor(unsigned char col, unsigned char row)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	28 97       	sbiw	r28, 0x08	; 8
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
	int row_offsets[] = { LCD_LINE1, LCD_LINE2, LCD_LINE3, LCD_LINE4 };
 168:	98 e0       	ldi	r25, 0x08	; 8
 16a:	e3 e1       	ldi	r30, 0x13	; 19
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	de 01       	movw	r26, r28
 170:	11 96       	adiw	r26, 0x01	; 1
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	9a 95       	dec	r25
 178:	e1 f7       	brne	.-8      	; 0x172 <LCD_set_cursor+0x1e>
	if ( row >= _numlines ) {
 17a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_numlines>
 17e:	69 17       	cp	r22, r25
 180:	10 f0       	brcs	.+4      	; 0x186 <LCD_set_cursor+0x32>
		row = _numlines-1;    // we count rows starting w/0
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	69 0f       	add	r22, r25
	}

	LCD_command_write(LCD_DD_RAM_ADDRESS | (col + row_offsets[row]));
 186:	e6 2f       	mov	r30, r22
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	89 0f       	add	r24, r25
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
	if ( row >= _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}

	LCD_command_write(LCD_DD_RAM_ADDRESS | (col + row_offsets[row]));
}
 19e:	28 96       	adiw	r28, 0x08	; 8
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <LCD_display_off>:

// Turn the display on/off (quickly)
void LCD_display_off(void) {
	_displayfunction &= ~LCD_DISPLAY_ON;
 1b0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayfunction>
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <_displayfunction>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
 1c2:	08 95       	ret

000001c4 <LCD_display_on>:
	_displayfunction &= ~LCD_DISPLAY_ON;
	LCD_command_write(LCD_DISPLAY_ON_OFF | _displayfunction);
}

void LCD_display_on(void) {
	_displayfunction |= LCD_DISPLAY_ON;
 1c4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayfunction>
 1c8:	98 2f       	mov	r25, r24
 1ca:	94 60       	ori	r25, 0x04	; 4
 1cc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_displayfunction>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	8c 60       	ori	r24, 0x0C	; 12
 1d4:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
 1d8:	08 95       	ret

000001da <LCD_init>:

FILE mystdout = FDEV_SETUP_STREAM(putchr, NULL, _FDEV_SETUP_WRITE);

void LCD_init(void){
	
	stdout = &mystdout;
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__iob+0x3>
 1e2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__iob+0x2>
	//_backlightval &= ~Bl; // Off at start up
	_backlightval |= Bl; // On at start up
 1e6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	_numlines = LCD_MAX_ROWS;
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_numlines>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	80 e7       	ldi	r24, 0x70	; 112
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <LCD_init+0x22>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_init+0x2c>
 206:	00 00       	nop
	// Ensure supply rails are up before config sequence
	_delay_us(50000);

	// Set all control and data lines low. D4 - D7, En (High=1), Rw (Low = 0 or Write), Rs (Control/Instruction) (Low = 0 or Control)
	//I2C_Write_Byte_Single_Reg(LCD_PCF8574_ADDR, LCD_INIT); // Backlight off (Bit 3 = 0)
	i2c_start_wait(LCD_PCF8574_ADDR + I2C_WRITE);
 208:	8e e4       	ldi	r24, 0x4E	; 78
 20a:	0e 94 41 03 	call	0x682	; 0x682 <i2c_start_wait>
	i2c_write(LCD_INIT);
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	0e 94 72 03 	call	0x6e4	; 0x6e4 <i2c_write>
 214:	8f e8       	ldi	r24, 0x8F	; 143
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_init+0x3e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_init+0x44>
 21e:	00 00       	nop
	_delay_us(100);

	// Sequence to put the LCD into 4 bit mode this is according to the hitachi HD44780 datasheet page 109

	// we start in 8bit mode
	LCD_write4bits(LCD_8BIT_INIT);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 226:	8f e4       	ldi	r24, 0x4F	; 79
 228:	96 e4       	ldi	r25, 0x46	; 70
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_init+0x50>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_init+0x56>
 230:	00 00       	nop
	_delay_us(4500);  // wait more than 4.1ms

	// second write
	LCD_write4bits(LCD_8BIT_INIT);
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 238:	87 e5       	ldi	r24, 0x57	; 87
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_init+0x62>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_init+0x68>
 242:	00 00       	nop
	_delay_us(150); // wait > 100us

	// third write
	LCD_write4bits(LCD_8BIT_INIT);
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 24a:	87 e5       	ldi	r24, 0x57	; 87
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_init+0x74>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_init+0x7a>
 254:	00 00       	nop
	_delay_us(150);

	// now set to 4-bit interface
	LCD_write4bits(LCD_4BIT_INIT);
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 76 00 	call	0xec	; 0xec <LCD_write4bits>
 25c:	87 e5       	ldi	r24, 0x57	; 87
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_init+0x86>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_init+0x8c>
 266:	00 00       	nop


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	88 e2       	ldi	r24, 0x28	; 40
 26c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
	// set # lines, font size, etc.
	_functionset = LCD_INTF4BITS | LCD_TWO_LINES | LCD_FONT_5_7;
	LCD_command_write(LCD_FUNCTION_SET | _functionset);
	//DelayMicroseconds(150);

	_displayfunction = LCD_DISPLAY_OFF | LCD_CURSOR_OFF | LCD_BLINKING_OFF;
 270:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <_displayfunction>
	LCD_display_off();
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_display_off>

	// turn the display on with no cursor or blinking default
	LCD_display_on();
 278:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_display_on>

	// set the entry mode
	_entrymodeset = LCD_INCREMENT | LCD_SHIFT_OFF; // Initialize to default text direction (for roman languages)
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_entrymodeset>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
 28a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_displayfunction>
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	88 60       	ori	r24, 0x08	; 8
 292:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
	// Display Function set
	// _displayfunction = LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINKING_OFF;
	LCD_command_write(LCD_DISPLAY_ON_OFF | _displayfunction);

	// Display Control set
	_displaycontrol = LCD_DISPLAY_SHIFT | LCD_SHIFT_LEFT;
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_displaycontrol>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	88 e1       	ldi	r24, 0x18	; 24
 2a0:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send>
	// Display Control set
	_displaycontrol = LCD_DISPLAY_SHIFT | LCD_SHIFT_LEFT;
	LCD_command_write(LCD_MV_CUR_SHIFT_DISPLAY | _displaycontrol);

	// clear display and return cursor to home position. (Address 0)
	LCD_clear();
 2a4:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_clear>
 2a8:	08 95       	ret

000002aa <init_interrupt>:
    }
}

void init_interrupt(void)
{
	TCCR1A |= (1<<WGM11);
 2aa:	e0 e8       	ldi	r30, 0x80	; 128
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
	OCR1A = 0xF9;
 2b4:	89 ef       	ldi	r24, 0xF9	; 249
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B |= (1<<CS01)|(1<<CS00);
 2c0:	e1 e8       	ldi	r30, 0x81	; 129
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	83 60       	ori	r24, 0x03	; 3
 2c8:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
 2ca:	ef e6       	ldi	r30, 0x6F	; 111
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
	sei();
 2d4:	78 94       	sei
 2d6:	08 95       	ret

000002d8 <__vector_11>:
	
}

ISR (TIMER1_COMPA_vect) //1000 means 2 seconds in real life
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	ms_counter++;
 2fa:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ms_counter>
 2fe:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <ms_counter+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <ms_counter+0x1>
 308:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ms_counter>
	if (ms_counter==1000)
 30c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ms_counter>
 310:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <ms_counter+0x1>
 314:	88 3e       	cpi	r24, 0xE8	; 232
 316:	93 40       	sbci	r25, 0x03	; 3
 318:	c1 f4       	brne	.+48     	; 0x34a <__vector_11+0x72>
	{
		limb=(rand() % 4);
 31a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <rand>
 31e:	83 70       	andi	r24, 0x03	; 3
 320:	90 78       	andi	r25, 0x80	; 128
 322:	99 23       	and	r25, r25
 324:	24 f4       	brge	.+8      	; 0x32e <__vector_11+0x56>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	8c 6f       	ori	r24, 0xFC	; 252
 32a:	9f 6f       	ori	r25, 0xFF	; 255
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <limb+0x1>
 332:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <limb>
		ms_counter=0;
 336:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <ms_counter+0x1>
 33a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <ms_counter>
		twosec=1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <twosec+0x1>
 346:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <twosec>
	}
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <adc_read>:

uint16_t adc_read(uint8_t adc_channel)
{
	ADMUX &= 0xF0; //clear the channel that was previously used
 36c:	ec e7       	ldi	r30, 0x7C	; 124
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	90 81       	ld	r25, Z
 372:	90 7f       	andi	r25, 0xF0	; 240
 374:	90 83       	st	Z, r25
	ADMUX |= adc_channel; // set the desired channel
 376:	90 81       	ld	r25, Z
 378:	89 2b       	or	r24, r25
 37a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //start the conversion by setting a flag into the register
 37c:	ea e7       	ldi	r30, 0x7A	; 122
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 64       	ori	r24, 0x40	; 64
 384:	80 83       	st	Z, r24
	while ( (ADCSRA &  (1<<ADSC))); // wait until the conversion is done
 386:	80 81       	ld	r24, Z
 388:	86 fd       	sbrc	r24, 6
 38a:	fd cf       	rjmp	.-6      	; 0x386 <adc_read+0x1a>
	return ADC;
 38c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 390:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 394:	08 95       	ret

00000396 <sensor>:

int sensor(int nlimb)
{
		result=0; //0=>unsuccesful
 396:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <result+0x1>
 39a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <result>
		adc_result = adc_read(nlimb); //read the result of conversion
 39e:	0e 94 b6 01 	call	0x36c	; 0x36c <adc_read>
		int voltage_base = (5000.0/1024); //this is the value of each interval
		adc_result = adc_result*voltage_base; //multiply the number of level by the interval
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <adc_result+0x1>
 3ae:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <adc_result>
		if (adc_result > 1000) result=1;
 3b2:	89 3e       	cpi	r24, 0xE9	; 233
 3b4:	93 40       	sbci	r25, 0x03	; 3
 3b6:	30 f0       	brcs	.+12     	; 0x3c4 <sensor+0x2e>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <result+0x1>
 3c0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <result>
		LCD_set_cursor(0,1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_set_cursor>
		printf("Voltage %d", adc_result);
 3cc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <adc_result+0x1>
 3d0:	8f 93       	push	r24
 3d2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <adc_result>
 3d6:	8f 93       	push	r24
 3d8:	8b e1       	ldi	r24, 0x1B	; 27
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
return result;
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
}
 3ec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <result>
 3f0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <result+0x1>
 3f4:	08 95       	ret

000003f6 <USART_init>:

void USART_init()
{
	//setting up the prescaler
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8); //high byte
 3f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALER); //low byte
 3fa:	83 e3       	ldi	r24, 0x33	; 51
 3fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //enable RX and TX channels - sending and receiving data
 400:	e1 ec       	ldi	r30, 0xC1	; 193
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	88 e1       	ldi	r24, 0x18	; 24
 406:	80 83       	st	Z, r24
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01)); //setting the connection so that there's 1 stop bit, 8 bit data, no parity (the standard)
 408:	86 e0       	ldi	r24, 0x06	; 6
 40a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B|= (1<<RXCIE0); //enable interrupts for RXIE
 40e:	80 81       	ld	r24, Z
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <main>:
volatile int twosec=0;
int success=0;

int main(void)
{
	i2c_init();
 416:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_init>
	LCD_init();
 41a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_init>
	init_interrupt();
 41e:	0e 94 55 01 	call	0x2aa	; 0x2aa <init_interrupt>
	USART_init();
 422:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <USART_init>
	
	DDRC = 0xF0; 
 426:	80 ef       	ldi	r24, 0xF0	; 240
 428:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 42a:	18 b8       	out	0x08, r1	; 8
	
	ADMUX = (1<<REFS0); // set the reference voltage as the AVcc - 5V of the Arduino
 42c:	80 e4       	ldi	r24, 0x40	; 64
 42e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN); // set the prescaler to 128 and turn on the ADC module
 432:	87 e8       	ldi	r24, 0x87	; 135
 434:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	
	srand((unsigned int) limb);
 438:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <limb>
 43c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <limb+0x1>
 440:	0e 94 d5 03 	call	0x7aa	; 0x7aa <srand>
	
	PORTB =(0<<PORTB5);
 444:	15 b8       	out	0x05, r1	; 5
	success=eeprom_read_byte((uint16_t *) adrsuccess);
 446:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <adrsuccess>
 44a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <adrsuccess+0x1>
 44e:	0e 94 87 06 	call	0xd0e	; 0xd0e <eeprom_read_byte>
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <success+0x1>
 458:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <success>
	if(success==1) PORTB =(1<<PORTB5);
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	11 f4       	brne	.+4      	; 0x464 <main+0x4e>
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	85 b9       	out	0x05, r24	; 5
unsigned int limb;
volatile int twosec=0;
int success=0;

int main(void)
{
 464:	c0 e0       	ldi	r28, 0x00	; 0
 466:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	
    while (1) 
    {
		LCD_set_cursor(0,0);
		printf("%d", limb);
 468:	03 e2       	ldi	r16, 0x23	; 35
 46a:	11 e0       	ldi	r17, 0x01	; 1
		if(twosec==1)
		{
			sensor(limb);
			LCD_set_cursor(0,2);
			printf("Result %d", result);
 46c:	0f 2e       	mov	r0, r31
 46e:	f6 e2       	ldi	r31, 0x26	; 38
 470:	ef 2e       	mov	r14, r31
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	ff 2e       	mov	r15, r31
 476:	f0 2d       	mov	r31, r0
					printf("%d", index[i]);
					i++;
				}
				if(i==4)
				{
					success=1;
 478:	cc 24       	eor	r12, r12
 47a:	c3 94       	inc	r12
 47c:	d1 2c       	mov	r13, r1
	
	int i=0;
	
    while (1) 
    {
		LCD_set_cursor(0,0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_set_cursor>
		printf("%d", limb);
 486:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <limb+0x1>
 48a:	8f 93       	push	r24
 48c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <limb>
 490:	8f 93       	push	r24
 492:	1f 93       	push	r17
 494:	0f 93       	push	r16
 496:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
		if(twosec==1)
 49a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <twosec>
 49e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <twosec+0x1>
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	41 f7       	brne	.-48     	; 0x47e <main+0x68>
		{
			sensor(limb);
 4ae:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <limb>
 4b2:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <limb+0x1>
 4b6:	0e 94 cb 01 	call	0x396	; 0x396 <sensor>
			LCD_set_cursor(0,2);
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_set_cursor>
			printf("Result %d", result);
 4c2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <result+0x1>
 4c6:	8f 93       	push	r24
 4c8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <result>
 4cc:	8f 93       	push	r24
 4ce:	ff 92       	push	r15
 4d0:	ef 92       	push	r14
 4d2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
			if(result==1)
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <result>
 4e2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <result+0x1>
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <main+0xdc>

				}
			}
			else
			{
				for(i;i>=0;i--)
 4ea:	dd 23       	and	r29, r29
 4ec:	0c f0       	brlt	.+2      	; 0x4f0 <main+0xda>
 4ee:	4f c0       	rjmp	.+158    	; 0x58e <main+0x178>
 4f0:	5a c0       	rjmp	.+180    	; 0x5a6 <main+0x190>
			sensor(limb);
			LCD_set_cursor(0,2);
			printf("Result %d", result);
			if(result==1)
			{
				if(i<5)
 4f2:	c5 30       	cpi	r28, 0x05	; 5
 4f4:	d1 05       	cpc	r29, r1
 4f6:	04 f5       	brge	.+64     	; 0x538 <main+0x122>
				{
					index[i]=limb;
 4f8:	ce 01       	movw	r24, r28
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	9c 01       	movw	r18, r24
 500:	2f 5b       	subi	r18, 0xBF	; 191
 502:	3e 4f       	sbci	r19, 0xFE	; 254
 504:	59 01       	movw	r10, r18
 506:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <limb>
 50a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <limb+0x1>
 50e:	f9 01       	movw	r30, r18
 510:	91 83       	std	Z+1, r25	; 0x01
 512:	80 83       	st	Z, r24
					LCD_set_cursor(i,3);
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	8c 2f       	mov	r24, r28
 518:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_set_cursor>
					printf("%d", index[i]);
 51c:	f5 01       	movw	r30, r10
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	8f 93       	push	r24
 522:	80 81       	ld	r24, Z
 524:	8f 93       	push	r24
 526:	1f 93       	push	r17
 528:	0f 93       	push	r16
 52a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <printf>
					i++;
 52e:	21 96       	adiw	r28, 0x01	; 1
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
				}
				if(i==4)
 538:	c4 30       	cpi	r28, 0x04	; 4
 53a:	d1 05       	cpc	r29, r1
 53c:	a1 f5       	brne	.+104    	; 0x5a6 <main+0x190>
				{
					success=1;
 53e:	d0 92 36 01 	sts	0x0136, r13	; 0x800136 <success+0x1>
 542:	c0 92 35 01 	sts	0x0135, r12	; 0x800135 <success>
					eeprom_write_byte((uint16_t *) adrsuccess, success);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <adrsuccess>
 54c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <adrsuccess+0x1>
 550:	0e 94 8f 06 	call	0xd1e	; 0xd1e <eeprom_write_byte>
 554:	0f 2e       	mov	r0, r31
 556:	f1 e4       	ldi	r31, 0x41	; 65
 558:	8f 2e       	mov	r8, r31
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	9f 2e       	mov	r9, r31
 55e:	f0 2d       	mov	r31, r0
 560:	a1 2c       	mov	r10, r1
 562:	b1 2c       	mov	r11, r1
					  for (int c = 0; c < 5; c++)
					  {
						  eeprom_write_byte((uint8_t *) adrindex+c*10, index[c]);
 564:	f4 01       	movw	r30, r8
 566:	60 81       	ld	r22, Z
 568:	f2 e0       	ldi	r31, 0x02	; 2
 56a:	8f 0e       	add	r8, r31
 56c:	91 1c       	adc	r9, r1
 56e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adrindex>
 572:	95 01       	movw	r18, r10
 574:	28 0f       	add	r18, r24
 576:	31 1d       	adc	r19, r1
 578:	c9 01       	movw	r24, r18
 57a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <eeprom_write_byte>
 57e:	3a e0       	ldi	r19, 0x0A	; 10
 580:	a3 0e       	add	r10, r19
 582:	b1 1c       	adc	r11, r1
				}
				if(i==4)
				{
					success=1;
					eeprom_write_byte((uint16_t *) adrsuccess, success);
					  for (int c = 0; c < 5; c++)
 584:	82 e3       	ldi	r24, 0x32	; 50
 586:	a8 16       	cp	r10, r24
 588:	b1 04       	cpc	r11, r1
 58a:	61 f7       	brne	.-40     	; 0x564 <main+0x14e>
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <main+0x190>
			}
			else
			{
				for(i;i>=0;i--)
				{
					index[i]=0;
 58e:	cc 0f       	add	r28, r28
 590:	dd 1f       	adc	r29, r29
 592:	cf 5b       	subi	r28, 0xBF	; 191
 594:	de 4f       	sbci	r29, 0xFE	; 254
 596:	19 82       	std	Y+1, r1	; 0x01
 598:	18 82       	st	Y, r1
					i=0;
					success=0;
 59a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <success+0x1>
 59e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <success>

				}
			}
			else
			{
				for(i;i>=0;i--)
 5a2:	cf ef       	ldi	r28, 0xFF	; 255
 5a4:	df ef       	ldi	r29, 0xFF	; 255
					index[i]=0;
					i=0;
					success=0;
				}
			}
		twosec=0;
 5a6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <twosec+0x1>
 5aa:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <twosec>
 5ae:	67 cf       	rjmp	.-306    	; 0x47e <main+0x68>

000005b0 <USART_send>:
	UCSR0B|= (1<<RXCIE0); //enable interrupts for RXIE
}

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //basically you need to send the data one bit at a time. This while loop waits until the port says it is ready to receive the next bit (wait for transmit buffer)
 5b0:	e0 ec       	ldi	r30, 0xC0	; 192
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	90 81       	ld	r25, Z
 5b6:	95 ff       	sbrs	r25, 5
 5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <USART_send+0x4>
	UDR0 = data; //puts our new data into the tunnel (data to be sent)
 5ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5be:	08 95       	ret

000005c0 <__vector_18>:
}

ISR (USART_RX_vect)
{
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char received_data = UDR0;
 5f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5f4:	89 83       	std	Y+1, r24	; 0x01
	if (received_data == 1) USART_send(success);
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	21 f4       	brne	.+8      	; 0x604 <__vector_18+0x44>
 5fc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <success>
 600:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <USART_send>
	if (received_data == 2)
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	01 f5       	brne	.+64     	; 0x64a <__vector_18+0x8a>
	{
		if(success==1)
 60a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <success>
 60e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <success+0x1>
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	91 f4       	brne	.+36     	; 0x63a <__vector_18+0x7a>
 616:	00 e0       	ldi	r16, 0x00	; 0
 618:	10 e0       	ldi	r17, 0x00	; 0
		{
		 for (int c = 0; c < 5; c++)
		 {
			USART_send(eeprom_read_byte((uint8_t *) adrindex+c*10));
 61a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adrindex>
 61e:	98 01       	movw	r18, r16
 620:	28 0f       	add	r18, r24
 622:	31 1d       	adc	r19, r1
 624:	c9 01       	movw	r24, r18
 626:	0e 94 87 06 	call	0xd0e	; 0xd0e <eeprom_read_byte>
 62a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <USART_send>
 62e:	06 5f       	subi	r16, 0xF6	; 246
 630:	1f 4f       	sbci	r17, 0xFF	; 255
	if (received_data == 1) USART_send(success);
	if (received_data == 2)
	{
		if(success==1)
		{
		 for (int c = 0; c < 5; c++)
 632:	02 33       	cpi	r16, 0x32	; 50
 634:	11 05       	cpc	r17, r1
 636:	89 f7       	brne	.-30     	; 0x61a <__vector_18+0x5a>
 638:	08 c0       	rjmp	.+16     	; 0x64a <__vector_18+0x8a>
 63a:	05 e0       	ldi	r16, 0x05	; 5
 63c:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
		{
			for (int k = 0; k < 5; k++)
			{
				USART_send(255);
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <USART_send>
 644:	01 50       	subi	r16, 0x01	; 1
 646:	11 09       	sbc	r17, r1
			USART_send(eeprom_read_byte((uint8_t *) adrindex+c*10));
		 }
		}
		else
		{
			for (int k = 0; k < 5; k++)
 648:	d1 f7       	brne	.-12     	; 0x63e <__vector_18+0x7e>
			{
				USART_send(255);
			}
		}
	}
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 676:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 67a:	88 e4       	ldi	r24, 0x48	; 72
 67c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 680:	08 95       	ret

00000682 <i2c_start_wait>:
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	ec eb       	ldi	r30, 0xBC	; 188
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	24 ea       	ldi	r18, 0xA4	; 164
 68c:	a9 eb       	ldi	r26, 0xB9	; 185
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	cb eb       	ldi	r28, 0xBB	; 187
 692:	d0 e0       	ldi	r29, 0x00	; 0
 694:	34 e8       	ldi	r19, 0x84	; 132
 696:	44 e9       	ldi	r20, 0x94	; 148
 698:	20 83       	st	Z, r18
 69a:	90 81       	ld	r25, Z
 69c:	99 23       	and	r25, r25
 69e:	ec f7       	brge	.-6      	; 0x69a <i2c_start_wait+0x18>
 6a0:	9c 91       	ld	r25, X
 6a2:	98 7f       	andi	r25, 0xF8	; 248
 6a4:	98 30       	cpi	r25, 0x08	; 8
 6a6:	11 f0       	breq	.+4      	; 0x6ac <i2c_start_wait+0x2a>
 6a8:	90 31       	cpi	r25, 0x10	; 16
 6aa:	b1 f7       	brne	.-20     	; 0x698 <i2c_start_wait+0x16>
 6ac:	88 83       	st	Y, r24
 6ae:	30 83       	st	Z, r19
 6b0:	90 81       	ld	r25, Z
 6b2:	99 23       	and	r25, r25
 6b4:	ec f7       	brge	.-6      	; 0x6b0 <i2c_start_wait+0x2e>
 6b6:	9c 91       	ld	r25, X
 6b8:	98 7f       	andi	r25, 0xF8	; 248
 6ba:	90 32       	cpi	r25, 0x20	; 32
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <i2c_start_wait+0x40>
 6be:	98 35       	cpi	r25, 0x58	; 88
 6c0:	29 f4       	brne	.+10     	; 0x6cc <i2c_start_wait+0x4a>
 6c2:	40 83       	st	Z, r20
 6c4:	90 81       	ld	r25, Z
 6c6:	94 fd       	sbrc	r25, 4
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <i2c_start_wait+0x42>
 6ca:	e6 cf       	rjmp	.-52     	; 0x698 <i2c_start_wait+0x16>
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6d2:	84 e9       	ldi	r24, 0x94	; 148
 6d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 6d8:	ec eb       	ldi	r30, 0xBC	; 188
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	84 fd       	sbrc	r24, 4
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <i2c_stop+0xa>

}/* i2c_stop */
 6e2:	08 95       	ret

000006e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 6e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 6e8:	84 e8       	ldi	r24, 0x84	; 132
 6ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 6ee:	ec eb       	ldi	r30, 0xBC	; 188
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 23       	and	r24, r24
 6f6:	ec f7       	brge	.-6      	; 0x6f2 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 6f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 6fc:	98 7f       	andi	r25, 0xF8	; 248
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	98 32       	cpi	r25, 0x28	; 40
 702:	09 f4       	brne	.+2      	; 0x706 <i2c_write+0x22>
 704:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 706:	08 95       	ret

00000708 <do_rand>:
 708:	8f 92       	push	r8
 70a:	9f 92       	push	r9
 70c:	af 92       	push	r10
 70e:	bf 92       	push	r11
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ec 01       	movw	r28, r24
 71e:	68 81       	ld	r22, Y
 720:	79 81       	ldd	r23, Y+1	; 0x01
 722:	8a 81       	ldd	r24, Y+2	; 0x02
 724:	9b 81       	ldd	r25, Y+3	; 0x03
 726:	61 15       	cp	r22, r1
 728:	71 05       	cpc	r23, r1
 72a:	81 05       	cpc	r24, r1
 72c:	91 05       	cpc	r25, r1
 72e:	21 f4       	brne	.+8      	; 0x738 <do_rand+0x30>
 730:	64 e2       	ldi	r22, 0x24	; 36
 732:	79 ed       	ldi	r23, 0xD9	; 217
 734:	8b e5       	ldi	r24, 0x5B	; 91
 736:	97 e0       	ldi	r25, 0x07	; 7
 738:	2d e1       	ldi	r18, 0x1D	; 29
 73a:	33 ef       	ldi	r19, 0xF3	; 243
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__divmodsi4>
 744:	49 01       	movw	r8, r18
 746:	5a 01       	movw	r10, r20
 748:	9b 01       	movw	r18, r22
 74a:	ac 01       	movw	r20, r24
 74c:	a7 ea       	ldi	r26, 0xA7	; 167
 74e:	b1 e4       	ldi	r27, 0x41	; 65
 750:	0e 94 bc 06 	call	0xd78	; 0xd78 <__muluhisi3>
 754:	6b 01       	movw	r12, r22
 756:	7c 01       	movw	r14, r24
 758:	ac ee       	ldi	r26, 0xEC	; 236
 75a:	b4 ef       	ldi	r27, 0xF4	; 244
 75c:	a5 01       	movw	r20, r10
 75e:	94 01       	movw	r18, r8
 760:	0e 94 ca 06 	call	0xd94	; 0xd94 <__mulohisi3>
 764:	dc 01       	movw	r26, r24
 766:	cb 01       	movw	r24, r22
 768:	8c 0d       	add	r24, r12
 76a:	9d 1d       	adc	r25, r13
 76c:	ae 1d       	adc	r26, r14
 76e:	bf 1d       	adc	r27, r15
 770:	b7 ff       	sbrs	r27, 7
 772:	03 c0       	rjmp	.+6      	; 0x77a <do_rand+0x72>
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	a1 09       	sbc	r26, r1
 778:	b0 48       	sbci	r27, 0x80	; 128
 77a:	88 83       	st	Y, r24
 77c:	99 83       	std	Y+1, r25	; 0x01
 77e:	aa 83       	std	Y+2, r26	; 0x02
 780:	bb 83       	std	Y+3, r27	; 0x03
 782:	9f 77       	andi	r25, 0x7F	; 127
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	ff 90       	pop	r15
 78a:	ef 90       	pop	r14
 78c:	df 90       	pop	r13
 78e:	cf 90       	pop	r12
 790:	bf 90       	pop	r11
 792:	af 90       	pop	r10
 794:	9f 90       	pop	r9
 796:	8f 90       	pop	r8
 798:	08 95       	ret

0000079a <rand_r>:
 79a:	0e 94 84 03 	call	0x708	; 0x708 <do_rand>
 79e:	08 95       	ret

000007a0 <rand>:
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 84 03 	call	0x708	; 0x708 <do_rand>
 7a8:	08 95       	ret

000007aa <srand>:
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 7b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 7b6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 7ba:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 7be:	08 95       	ret

000007c0 <printf>:
 7c0:	a0 e0       	ldi	r26, 0x00	; 0
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	e6 ee       	ldi	r30, 0xE6	; 230
 7c6:	f3 e0       	ldi	r31, 0x03	; 3
 7c8:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__prologue_saves__+0x20>
 7cc:	ae 01       	movw	r20, r28
 7ce:	4b 5f       	subi	r20, 0xFB	; 251
 7d0:	5f 4f       	sbci	r21, 0xFF	; 255
 7d2:	fa 01       	movw	r30, r20
 7d4:	61 91       	ld	r22, Z+
 7d6:	71 91       	ld	r23, Z+
 7d8:	af 01       	movw	r20, r30
 7da:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__iob+0x2>
 7de:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__iob+0x3>
 7e2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vfprintf>
 7e6:	e2 e0       	ldi	r30, 0x02	; 2
 7e8:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__epilogue_restores__+0x20>

000007ec <vfprintf>:
 7ec:	ab e0       	ldi	r26, 0x0B	; 11
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	ec ef       	ldi	r30, 0xFC	; 252
 7f2:	f3 e0       	ldi	r31, 0x03	; 3
 7f4:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__prologue_saves__>
 7f8:	6c 01       	movw	r12, r24
 7fa:	7b 01       	movw	r14, r22
 7fc:	8a 01       	movw	r16, r20
 7fe:	fc 01       	movw	r30, r24
 800:	17 82       	std	Z+7, r1	; 0x07
 802:	16 82       	std	Z+6, r1	; 0x06
 804:	83 81       	ldd	r24, Z+3	; 0x03
 806:	81 ff       	sbrs	r24, 1
 808:	cc c1       	rjmp	.+920    	; 0xba2 <__stack+0x2a3>
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	3c 01       	movw	r6, r24
 810:	f6 01       	movw	r30, r12
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	f7 01       	movw	r30, r14
 816:	93 fd       	sbrc	r25, 3
 818:	85 91       	lpm	r24, Z+
 81a:	93 ff       	sbrs	r25, 3
 81c:	81 91       	ld	r24, Z+
 81e:	7f 01       	movw	r14, r30
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <vfprintf+0x3a>
 824:	ba c1       	rjmp	.+884    	; 0xb9a <__stack+0x29b>
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	39 f4       	brne	.+14     	; 0x838 <vfprintf+0x4c>
 82a:	93 fd       	sbrc	r25, 3
 82c:	85 91       	lpm	r24, Z+
 82e:	93 ff       	sbrs	r25, 3
 830:	81 91       	ld	r24, Z+
 832:	7f 01       	movw	r14, r30
 834:	85 32       	cpi	r24, 0x25	; 37
 836:	29 f4       	brne	.+10     	; 0x842 <vfprintf+0x56>
 838:	b6 01       	movw	r22, r12
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 840:	e7 cf       	rjmp	.-50     	; 0x810 <vfprintf+0x24>
 842:	91 2c       	mov	r9, r1
 844:	21 2c       	mov	r2, r1
 846:	31 2c       	mov	r3, r1
 848:	ff e1       	ldi	r31, 0x1F	; 31
 84a:	f3 15       	cp	r31, r3
 84c:	d8 f0       	brcs	.+54     	; 0x884 <vfprintf+0x98>
 84e:	8b 32       	cpi	r24, 0x2B	; 43
 850:	79 f0       	breq	.+30     	; 0x870 <vfprintf+0x84>
 852:	38 f4       	brcc	.+14     	; 0x862 <vfprintf+0x76>
 854:	80 32       	cpi	r24, 0x20	; 32
 856:	79 f0       	breq	.+30     	; 0x876 <vfprintf+0x8a>
 858:	83 32       	cpi	r24, 0x23	; 35
 85a:	a1 f4       	brne	.+40     	; 0x884 <vfprintf+0x98>
 85c:	23 2d       	mov	r18, r3
 85e:	20 61       	ori	r18, 0x10	; 16
 860:	1d c0       	rjmp	.+58     	; 0x89c <vfprintf+0xb0>
 862:	8d 32       	cpi	r24, 0x2D	; 45
 864:	61 f0       	breq	.+24     	; 0x87e <vfprintf+0x92>
 866:	80 33       	cpi	r24, 0x30	; 48
 868:	69 f4       	brne	.+26     	; 0x884 <vfprintf+0x98>
 86a:	23 2d       	mov	r18, r3
 86c:	21 60       	ori	r18, 0x01	; 1
 86e:	16 c0       	rjmp	.+44     	; 0x89c <vfprintf+0xb0>
 870:	83 2d       	mov	r24, r3
 872:	82 60       	ori	r24, 0x02	; 2
 874:	38 2e       	mov	r3, r24
 876:	e3 2d       	mov	r30, r3
 878:	e4 60       	ori	r30, 0x04	; 4
 87a:	3e 2e       	mov	r3, r30
 87c:	2a c0       	rjmp	.+84     	; 0x8d2 <vfprintf+0xe6>
 87e:	f3 2d       	mov	r31, r3
 880:	f8 60       	ori	r31, 0x08	; 8
 882:	1d c0       	rjmp	.+58     	; 0x8be <vfprintf+0xd2>
 884:	37 fc       	sbrc	r3, 7
 886:	2d c0       	rjmp	.+90     	; 0x8e2 <vfprintf+0xf6>
 888:	20 ed       	ldi	r18, 0xD0	; 208
 88a:	28 0f       	add	r18, r24
 88c:	2a 30       	cpi	r18, 0x0A	; 10
 88e:	40 f0       	brcs	.+16     	; 0x8a0 <vfprintf+0xb4>
 890:	8e 32       	cpi	r24, 0x2E	; 46
 892:	b9 f4       	brne	.+46     	; 0x8c2 <vfprintf+0xd6>
 894:	36 fc       	sbrc	r3, 6
 896:	81 c1       	rjmp	.+770    	; 0xb9a <__stack+0x29b>
 898:	23 2d       	mov	r18, r3
 89a:	20 64       	ori	r18, 0x40	; 64
 89c:	32 2e       	mov	r3, r18
 89e:	19 c0       	rjmp	.+50     	; 0x8d2 <vfprintf+0xe6>
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0xc4>
 8a4:	8a e0       	ldi	r24, 0x0A	; 10
 8a6:	98 9e       	mul	r9, r24
 8a8:	20 0d       	add	r18, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	92 2e       	mov	r9, r18
 8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <vfprintf+0xe6>
 8b0:	ea e0       	ldi	r30, 0x0A	; 10
 8b2:	2e 9e       	mul	r2, r30
 8b4:	20 0d       	add	r18, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	22 2e       	mov	r2, r18
 8ba:	f3 2d       	mov	r31, r3
 8bc:	f0 62       	ori	r31, 0x20	; 32
 8be:	3f 2e       	mov	r3, r31
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <vfprintf+0xe6>
 8c2:	8c 36       	cpi	r24, 0x6C	; 108
 8c4:	21 f4       	brne	.+8      	; 0x8ce <vfprintf+0xe2>
 8c6:	83 2d       	mov	r24, r3
 8c8:	80 68       	ori	r24, 0x80	; 128
 8ca:	38 2e       	mov	r3, r24
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0xe6>
 8ce:	88 36       	cpi	r24, 0x68	; 104
 8d0:	41 f4       	brne	.+16     	; 0x8e2 <vfprintf+0xf6>
 8d2:	f7 01       	movw	r30, r14
 8d4:	93 fd       	sbrc	r25, 3
 8d6:	85 91       	lpm	r24, Z+
 8d8:	93 ff       	sbrs	r25, 3
 8da:	81 91       	ld	r24, Z+
 8dc:	7f 01       	movw	r14, r30
 8de:	81 11       	cpse	r24, r1
 8e0:	b3 cf       	rjmp	.-154    	; 0x848 <vfprintf+0x5c>
 8e2:	98 2f       	mov	r25, r24
 8e4:	9f 7d       	andi	r25, 0xDF	; 223
 8e6:	95 54       	subi	r25, 0x45	; 69
 8e8:	93 30       	cpi	r25, 0x03	; 3
 8ea:	28 f4       	brcc	.+10     	; 0x8f6 <vfprintf+0x10a>
 8ec:	0c 5f       	subi	r16, 0xFC	; 252
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	9f e3       	ldi	r25, 0x3F	; 63
 8f2:	99 83       	std	Y+1, r25	; 0x01
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <__stack+0x11>
 8f6:	83 36       	cpi	r24, 0x63	; 99
 8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0x7>
 8fa:	83 37       	cpi	r24, 0x73	; 115
 8fc:	71 f0       	breq	.+28     	; 0x91a <__stack+0x1b>
 8fe:	83 35       	cpi	r24, 0x53	; 83
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
 902:	59 c0       	rjmp	.+178    	; 0x9b6 <__stack+0xb7>
 904:	21 c0       	rjmp	.+66     	; 0x948 <__stack+0x49>
 906:	f8 01       	movw	r30, r16
 908:	80 81       	ld	r24, Z
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	0e 5f       	subi	r16, 0xFE	; 254
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	88 24       	eor	r8, r8
 912:	83 94       	inc	r8
 914:	91 2c       	mov	r9, r1
 916:	53 01       	movw	r10, r6
 918:	13 c0       	rjmp	.+38     	; 0x940 <__stack+0x41>
 91a:	28 01       	movw	r4, r16
 91c:	f2 e0       	ldi	r31, 0x02	; 2
 91e:	4f 0e       	add	r4, r31
 920:	51 1c       	adc	r5, r1
 922:	f8 01       	movw	r30, r16
 924:	a0 80       	ld	r10, Z
 926:	b1 80       	ldd	r11, Z+1	; 0x01
 928:	36 fe       	sbrs	r3, 6
 92a:	03 c0       	rjmp	.+6      	; 0x932 <__stack+0x33>
 92c:	69 2d       	mov	r22, r9
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	6f ef       	ldi	r22, 0xFF	; 255
 934:	7f ef       	ldi	r23, 0xFF	; 255
 936:	c5 01       	movw	r24, r10
 938:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <strnlen>
 93c:	4c 01       	movw	r8, r24
 93e:	82 01       	movw	r16, r4
 940:	f3 2d       	mov	r31, r3
 942:	ff 77       	andi	r31, 0x7F	; 127
 944:	3f 2e       	mov	r3, r31
 946:	16 c0       	rjmp	.+44     	; 0x974 <__stack+0x75>
 948:	28 01       	movw	r4, r16
 94a:	22 e0       	ldi	r18, 0x02	; 2
 94c:	42 0e       	add	r4, r18
 94e:	51 1c       	adc	r5, r1
 950:	f8 01       	movw	r30, r16
 952:	a0 80       	ld	r10, Z
 954:	b1 80       	ldd	r11, Z+1	; 0x01
 956:	36 fe       	sbrs	r3, 6
 958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
 95a:	69 2d       	mov	r22, r9
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	6f ef       	ldi	r22, 0xFF	; 255
 962:	7f ef       	ldi	r23, 0xFF	; 255
 964:	c5 01       	movw	r24, r10
 966:	0e 94 d7 05 	call	0xbae	; 0xbae <strnlen_P>
 96a:	4c 01       	movw	r8, r24
 96c:	f3 2d       	mov	r31, r3
 96e:	f0 68       	ori	r31, 0x80	; 128
 970:	3f 2e       	mov	r3, r31
 972:	82 01       	movw	r16, r4
 974:	33 fc       	sbrc	r3, 3
 976:	1b c0       	rjmp	.+54     	; 0x9ae <__stack+0xaf>
 978:	82 2d       	mov	r24, r2
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	88 16       	cp	r8, r24
 97e:	99 06       	cpc	r9, r25
 980:	b0 f4       	brcc	.+44     	; 0x9ae <__stack+0xaf>
 982:	b6 01       	movw	r22, r12
 984:	80 e2       	ldi	r24, 0x20	; 32
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 98c:	2a 94       	dec	r2
 98e:	f4 cf       	rjmp	.-24     	; 0x978 <__stack+0x79>
 990:	f5 01       	movw	r30, r10
 992:	37 fc       	sbrc	r3, 7
 994:	85 91       	lpm	r24, Z+
 996:	37 fe       	sbrs	r3, 7
 998:	81 91       	ld	r24, Z+
 99a:	5f 01       	movw	r10, r30
 99c:	b6 01       	movw	r22, r12
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 9a4:	21 10       	cpse	r2, r1
 9a6:	2a 94       	dec	r2
 9a8:	21 e0       	ldi	r18, 0x01	; 1
 9aa:	82 1a       	sub	r8, r18
 9ac:	91 08       	sbc	r9, r1
 9ae:	81 14       	cp	r8, r1
 9b0:	91 04       	cpc	r9, r1
 9b2:	71 f7       	brne	.-36     	; 0x990 <__stack+0x91>
 9b4:	e8 c0       	rjmp	.+464    	; 0xb86 <__stack+0x287>
 9b6:	84 36       	cpi	r24, 0x64	; 100
 9b8:	11 f0       	breq	.+4      	; 0x9be <__stack+0xbf>
 9ba:	89 36       	cpi	r24, 0x69	; 105
 9bc:	41 f5       	brne	.+80     	; 0xa0e <__stack+0x10f>
 9be:	f8 01       	movw	r30, r16
 9c0:	37 fe       	sbrs	r3, 7
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <__stack+0xd3>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	82 81       	ldd	r24, Z+2	; 0x02
 9ca:	93 81       	ldd	r25, Z+3	; 0x03
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <__stack+0xe3>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	07 2e       	mov	r0, r23
 9d8:	00 0c       	add	r0, r0
 9da:	88 0b       	sbc	r24, r24
 9dc:	99 0b       	sbc	r25, r25
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	f3 2d       	mov	r31, r3
 9e4:	ff 76       	andi	r31, 0x6F	; 111
 9e6:	3f 2e       	mov	r3, r31
 9e8:	97 ff       	sbrs	r25, 7
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__stack+0xff>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	f0 68       	ori	r31, 0x80	; 128
 9fc:	3f 2e       	mov	r3, r31
 9fe:	2a e0       	ldi	r18, 0x0A	; 10
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	a3 01       	movw	r20, r6
 a04:	0e 94 29 06 	call	0xc52	; 0xc52 <__ultoa_invert>
 a08:	88 2e       	mov	r8, r24
 a0a:	86 18       	sub	r8, r6
 a0c:	45 c0       	rjmp	.+138    	; 0xa98 <__stack+0x199>
 a0e:	85 37       	cpi	r24, 0x75	; 117
 a10:	31 f4       	brne	.+12     	; 0xa1e <__stack+0x11f>
 a12:	23 2d       	mov	r18, r3
 a14:	2f 7e       	andi	r18, 0xEF	; 239
 a16:	b2 2e       	mov	r11, r18
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	25 c0       	rjmp	.+74     	; 0xa68 <__stack+0x169>
 a1e:	93 2d       	mov	r25, r3
 a20:	99 7f       	andi	r25, 0xF9	; 249
 a22:	b9 2e       	mov	r11, r25
 a24:	8f 36       	cpi	r24, 0x6F	; 111
 a26:	c1 f0       	breq	.+48     	; 0xa58 <__stack+0x159>
 a28:	18 f4       	brcc	.+6      	; 0xa30 <__stack+0x131>
 a2a:	88 35       	cpi	r24, 0x58	; 88
 a2c:	79 f0       	breq	.+30     	; 0xa4c <__stack+0x14d>
 a2e:	b5 c0       	rjmp	.+362    	; 0xb9a <__stack+0x29b>
 a30:	80 37       	cpi	r24, 0x70	; 112
 a32:	19 f0       	breq	.+6      	; 0xa3a <__stack+0x13b>
 a34:	88 37       	cpi	r24, 0x78	; 120
 a36:	21 f0       	breq	.+8      	; 0xa40 <__stack+0x141>
 a38:	b0 c0       	rjmp	.+352    	; 0xb9a <__stack+0x29b>
 a3a:	e9 2f       	mov	r30, r25
 a3c:	e0 61       	ori	r30, 0x10	; 16
 a3e:	be 2e       	mov	r11, r30
 a40:	b4 fe       	sbrs	r11, 4
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <__stack+0x15f>
 a44:	fb 2d       	mov	r31, r11
 a46:	f4 60       	ori	r31, 0x04	; 4
 a48:	bf 2e       	mov	r11, r31
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__stack+0x15f>
 a4c:	34 fe       	sbrs	r3, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <__stack+0x165>
 a50:	29 2f       	mov	r18, r25
 a52:	26 60       	ori	r18, 0x06	; 6
 a54:	b2 2e       	mov	r11, r18
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <__stack+0x165>
 a58:	28 e0       	ldi	r18, 0x08	; 8
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <__stack+0x169>
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	20 e1       	ldi	r18, 0x10	; 16
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	f8 01       	movw	r30, r16
 a6a:	b7 fe       	sbrs	r11, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__stack+0x17d>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 5f       	subi	r16, 0xFE	; 254
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	a3 01       	movw	r20, r6
 a8a:	0e 94 29 06 	call	0xc52	; 0xc52 <__ultoa_invert>
 a8e:	88 2e       	mov	r8, r24
 a90:	86 18       	sub	r8, r6
 a92:	fb 2d       	mov	r31, r11
 a94:	ff 77       	andi	r31, 0x7F	; 127
 a96:	3f 2e       	mov	r3, r31
 a98:	36 fe       	sbrs	r3, 6
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <__stack+0x1b7>
 a9c:	23 2d       	mov	r18, r3
 a9e:	2e 7f       	andi	r18, 0xFE	; 254
 aa0:	a2 2e       	mov	r10, r18
 aa2:	89 14       	cp	r8, r9
 aa4:	58 f4       	brcc	.+22     	; 0xabc <__stack+0x1bd>
 aa6:	34 fe       	sbrs	r3, 4
 aa8:	0b c0       	rjmp	.+22     	; 0xac0 <__stack+0x1c1>
 aaa:	32 fc       	sbrc	r3, 2
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <__stack+0x1c1>
 aae:	83 2d       	mov	r24, r3
 ab0:	8e 7e       	andi	r24, 0xEE	; 238
 ab2:	a8 2e       	mov	r10, r24
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__stack+0x1c1>
 ab6:	b8 2c       	mov	r11, r8
 ab8:	a3 2c       	mov	r10, r3
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x1c3>
 abc:	b8 2c       	mov	r11, r8
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <__stack+0x1c3>
 ac0:	b9 2c       	mov	r11, r9
 ac2:	a4 fe       	sbrs	r10, 4
 ac4:	0f c0       	rjmp	.+30     	; 0xae4 <__stack+0x1e5>
 ac6:	fe 01       	movw	r30, r28
 ac8:	e8 0d       	add	r30, r8
 aca:	f1 1d       	adc	r31, r1
 acc:	80 81       	ld	r24, Z
 ace:	80 33       	cpi	r24, 0x30	; 48
 ad0:	21 f4       	brne	.+8      	; 0xada <__stack+0x1db>
 ad2:	9a 2d       	mov	r25, r10
 ad4:	99 7e       	andi	r25, 0xE9	; 233
 ad6:	a9 2e       	mov	r10, r25
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <__stack+0x1ed>
 ada:	a2 fe       	sbrs	r10, 2
 adc:	06 c0       	rjmp	.+12     	; 0xaea <__stack+0x1eb>
 ade:	b3 94       	inc	r11
 ae0:	b3 94       	inc	r11
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x1ed>
 ae4:	8a 2d       	mov	r24, r10
 ae6:	86 78       	andi	r24, 0x86	; 134
 ae8:	09 f0       	breq	.+2      	; 0xaec <__stack+0x1ed>
 aea:	b3 94       	inc	r11
 aec:	a3 fc       	sbrc	r10, 3
 aee:	11 c0       	rjmp	.+34     	; 0xb12 <__stack+0x213>
 af0:	a0 fe       	sbrs	r10, 0
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <__stack+0x201>
 af4:	b2 14       	cp	r11, r2
 af6:	88 f4       	brcc	.+34     	; 0xb1a <__stack+0x21b>
 af8:	28 0c       	add	r2, r8
 afa:	92 2c       	mov	r9, r2
 afc:	9b 18       	sub	r9, r11
 afe:	0e c0       	rjmp	.+28     	; 0xb1c <__stack+0x21d>
 b00:	b2 14       	cp	r11, r2
 b02:	60 f4       	brcc	.+24     	; 0xb1c <__stack+0x21d>
 b04:	b6 01       	movw	r22, r12
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b0e:	b3 94       	inc	r11
 b10:	f7 cf       	rjmp	.-18     	; 0xb00 <__stack+0x201>
 b12:	b2 14       	cp	r11, r2
 b14:	18 f4       	brcc	.+6      	; 0xb1c <__stack+0x21d>
 b16:	2b 18       	sub	r2, r11
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <__stack+0x21f>
 b1a:	98 2c       	mov	r9, r8
 b1c:	21 2c       	mov	r2, r1
 b1e:	a4 fe       	sbrs	r10, 4
 b20:	10 c0       	rjmp	.+32     	; 0xb42 <__stack+0x243>
 b22:	b6 01       	movw	r22, r12
 b24:	80 e3       	ldi	r24, 0x30	; 48
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b2c:	a2 fe       	sbrs	r10, 2
 b2e:	17 c0       	rjmp	.+46     	; 0xb5e <__stack+0x25f>
 b30:	a1 fc       	sbrc	r10, 1
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <__stack+0x23b>
 b34:	88 e7       	ldi	r24, 0x78	; 120
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <__stack+0x23f>
 b3a:	88 e5       	ldi	r24, 0x58	; 88
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	b6 01       	movw	r22, r12
 b40:	0c c0       	rjmp	.+24     	; 0xb5a <__stack+0x25b>
 b42:	8a 2d       	mov	r24, r10
 b44:	86 78       	andi	r24, 0x86	; 134
 b46:	59 f0       	breq	.+22     	; 0xb5e <__stack+0x25f>
 b48:	a1 fe       	sbrs	r10, 1
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__stack+0x251>
 b4c:	8b e2       	ldi	r24, 0x2B	; 43
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <__stack+0x253>
 b50:	80 e2       	ldi	r24, 0x20	; 32
 b52:	a7 fc       	sbrc	r10, 7
 b54:	8d e2       	ldi	r24, 0x2D	; 45
 b56:	b6 01       	movw	r22, r12
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b5e:	89 14       	cp	r8, r9
 b60:	38 f4       	brcc	.+14     	; 0xb70 <__stack+0x271>
 b62:	b6 01       	movw	r22, r12
 b64:	80 e3       	ldi	r24, 0x30	; 48
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b6c:	9a 94       	dec	r9
 b6e:	f7 cf       	rjmp	.-18     	; 0xb5e <__stack+0x25f>
 b70:	8a 94       	dec	r8
 b72:	f3 01       	movw	r30, r6
 b74:	e8 0d       	add	r30, r8
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	b6 01       	movw	r22, r12
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b82:	81 10       	cpse	r8, r1
 b84:	f5 cf       	rjmp	.-22     	; 0xb70 <__stack+0x271>
 b86:	22 20       	and	r2, r2
 b88:	09 f4       	brne	.+2      	; 0xb8c <__stack+0x28d>
 b8a:	42 ce       	rjmp	.-892    	; 0x810 <vfprintf+0x24>
 b8c:	b6 01       	movw	r22, r12
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b96:	2a 94       	dec	r2
 b98:	f6 cf       	rjmp	.-20     	; 0xb86 <__stack+0x287>
 b9a:	f6 01       	movw	r30, r12
 b9c:	86 81       	ldd	r24, Z+6	; 0x06
 b9e:	97 81       	ldd	r25, Z+7	; 0x07
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <__stack+0x2a7>
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	9f ef       	ldi	r25, 0xFF	; 255
 ba6:	2b 96       	adiw	r28, 0x0b	; 11
 ba8:	e2 e1       	ldi	r30, 0x12	; 18
 baa:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__epilogue_restores__>

00000bae <strnlen_P>:
 bae:	fc 01       	movw	r30, r24
 bb0:	05 90       	lpm	r0, Z+
 bb2:	61 50       	subi	r22, 0x01	; 1
 bb4:	70 40       	sbci	r23, 0x00	; 0
 bb6:	01 10       	cpse	r0, r1
 bb8:	d8 f7       	brcc	.-10     	; 0xbb0 <strnlen_P+0x2>
 bba:	80 95       	com	r24
 bbc:	90 95       	com	r25
 bbe:	8e 0f       	add	r24, r30
 bc0:	9f 1f       	adc	r25, r31
 bc2:	08 95       	ret

00000bc4 <strnlen>:
 bc4:	fc 01       	movw	r30, r24
 bc6:	61 50       	subi	r22, 0x01	; 1
 bc8:	70 40       	sbci	r23, 0x00	; 0
 bca:	01 90       	ld	r0, Z+
 bcc:	01 10       	cpse	r0, r1
 bce:	d8 f7       	brcc	.-10     	; 0xbc6 <strnlen+0x2>
 bd0:	80 95       	com	r24
 bd2:	90 95       	com	r25
 bd4:	8e 0f       	add	r24, r30
 bd6:	9f 1f       	adc	r25, r31
 bd8:	08 95       	ret

00000bda <fputc>:
 bda:	0f 93       	push	r16
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	fb 01       	movw	r30, r22
 be4:	23 81       	ldd	r18, Z+3	; 0x03
 be6:	21 fd       	sbrc	r18, 1
 be8:	03 c0       	rjmp	.+6      	; 0xbf0 <fputc+0x16>
 bea:	8f ef       	ldi	r24, 0xFF	; 255
 bec:	9f ef       	ldi	r25, 0xFF	; 255
 bee:	2c c0       	rjmp	.+88     	; 0xc48 <fputc+0x6e>
 bf0:	22 ff       	sbrs	r18, 2
 bf2:	16 c0       	rjmp	.+44     	; 0xc20 <fputc+0x46>
 bf4:	46 81       	ldd	r20, Z+6	; 0x06
 bf6:	57 81       	ldd	r21, Z+7	; 0x07
 bf8:	24 81       	ldd	r18, Z+4	; 0x04
 bfa:	35 81       	ldd	r19, Z+5	; 0x05
 bfc:	42 17       	cp	r20, r18
 bfe:	53 07       	cpc	r21, r19
 c00:	44 f4       	brge	.+16     	; 0xc12 <fputc+0x38>
 c02:	a0 81       	ld	r26, Z
 c04:	b1 81       	ldd	r27, Z+1	; 0x01
 c06:	9d 01       	movw	r18, r26
 c08:	2f 5f       	subi	r18, 0xFF	; 255
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	31 83       	std	Z+1, r19	; 0x01
 c0e:	20 83       	st	Z, r18
 c10:	8c 93       	st	X, r24
 c12:	26 81       	ldd	r18, Z+6	; 0x06
 c14:	37 81       	ldd	r19, Z+7	; 0x07
 c16:	2f 5f       	subi	r18, 0xFF	; 255
 c18:	3f 4f       	sbci	r19, 0xFF	; 255
 c1a:	37 83       	std	Z+7, r19	; 0x07
 c1c:	26 83       	std	Z+6, r18	; 0x06
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <fputc+0x6e>
 c20:	8b 01       	movw	r16, r22
 c22:	ec 01       	movw	r28, r24
 c24:	fb 01       	movw	r30, r22
 c26:	00 84       	ldd	r0, Z+8	; 0x08
 c28:	f1 85       	ldd	r31, Z+9	; 0x09
 c2a:	e0 2d       	mov	r30, r0
 c2c:	09 95       	icall
 c2e:	89 2b       	or	r24, r25
 c30:	e1 f6       	brne	.-72     	; 0xbea <fputc+0x10>
 c32:	d8 01       	movw	r26, r16
 c34:	16 96       	adiw	r26, 0x06	; 6
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	17 97       	sbiw	r26, 0x07	; 7
 c3c:	01 96       	adiw	r24, 0x01	; 1
 c3e:	17 96       	adiw	r26, 0x07	; 7
 c40:	9c 93       	st	X, r25
 c42:	8e 93       	st	-X, r24
 c44:	16 97       	sbiw	r26, 0x06	; 6
 c46:	ce 01       	movw	r24, r28
 c48:	df 91       	pop	r29
 c4a:	cf 91       	pop	r28
 c4c:	1f 91       	pop	r17
 c4e:	0f 91       	pop	r16
 c50:	08 95       	ret

00000c52 <__ultoa_invert>:
 c52:	fa 01       	movw	r30, r20
 c54:	aa 27       	eor	r26, r26
 c56:	28 30       	cpi	r18, 0x08	; 8
 c58:	51 f1       	breq	.+84     	; 0xcae <__ultoa_invert+0x5c>
 c5a:	20 31       	cpi	r18, 0x10	; 16
 c5c:	81 f1       	breq	.+96     	; 0xcbe <__ultoa_invert+0x6c>
 c5e:	e8 94       	clt
 c60:	6f 93       	push	r22
 c62:	6e 7f       	andi	r22, 0xFE	; 254
 c64:	6e 5f       	subi	r22, 0xFE	; 254
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	af 4f       	sbci	r26, 0xFF	; 255
 c6e:	b1 e0       	ldi	r27, 0x01	; 1
 c70:	3e d0       	rcall	.+124    	; 0xcee <__ultoa_invert+0x9c>
 c72:	b4 e0       	ldi	r27, 0x04	; 4
 c74:	3c d0       	rcall	.+120    	; 0xcee <__ultoa_invert+0x9c>
 c76:	67 0f       	add	r22, r23
 c78:	78 1f       	adc	r23, r24
 c7a:	89 1f       	adc	r24, r25
 c7c:	9a 1f       	adc	r25, r26
 c7e:	a1 1d       	adc	r26, r1
 c80:	68 0f       	add	r22, r24
 c82:	79 1f       	adc	r23, r25
 c84:	8a 1f       	adc	r24, r26
 c86:	91 1d       	adc	r25, r1
 c88:	a1 1d       	adc	r26, r1
 c8a:	6a 0f       	add	r22, r26
 c8c:	71 1d       	adc	r23, r1
 c8e:	81 1d       	adc	r24, r1
 c90:	91 1d       	adc	r25, r1
 c92:	a1 1d       	adc	r26, r1
 c94:	20 d0       	rcall	.+64     	; 0xcd6 <__ultoa_invert+0x84>
 c96:	09 f4       	brne	.+2      	; 0xc9a <__ultoa_invert+0x48>
 c98:	68 94       	set
 c9a:	3f 91       	pop	r19
 c9c:	2a e0       	ldi	r18, 0x0A	; 10
 c9e:	26 9f       	mul	r18, r22
 ca0:	11 24       	eor	r1, r1
 ca2:	30 19       	sub	r19, r0
 ca4:	30 5d       	subi	r19, 0xD0	; 208
 ca6:	31 93       	st	Z+, r19
 ca8:	de f6       	brtc	.-74     	; 0xc60 <__ultoa_invert+0xe>
 caa:	cf 01       	movw	r24, r30
 cac:	08 95       	ret
 cae:	46 2f       	mov	r20, r22
 cb0:	47 70       	andi	r20, 0x07	; 7
 cb2:	40 5d       	subi	r20, 0xD0	; 208
 cb4:	41 93       	st	Z+, r20
 cb6:	b3 e0       	ldi	r27, 0x03	; 3
 cb8:	0f d0       	rcall	.+30     	; 0xcd8 <__ultoa_invert+0x86>
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0x5c>
 cbc:	f6 cf       	rjmp	.-20     	; 0xcaa <__ultoa_invert+0x58>
 cbe:	46 2f       	mov	r20, r22
 cc0:	4f 70       	andi	r20, 0x0F	; 15
 cc2:	40 5d       	subi	r20, 0xD0	; 208
 cc4:	4a 33       	cpi	r20, 0x3A	; 58
 cc6:	18 f0       	brcs	.+6      	; 0xcce <__ultoa_invert+0x7c>
 cc8:	49 5d       	subi	r20, 0xD9	; 217
 cca:	31 fd       	sbrc	r19, 1
 ccc:	40 52       	subi	r20, 0x20	; 32
 cce:	41 93       	st	Z+, r20
 cd0:	02 d0       	rcall	.+4      	; 0xcd6 <__ultoa_invert+0x84>
 cd2:	a9 f7       	brne	.-22     	; 0xcbe <__ultoa_invert+0x6c>
 cd4:	ea cf       	rjmp	.-44     	; 0xcaa <__ultoa_invert+0x58>
 cd6:	b4 e0       	ldi	r27, 0x04	; 4
 cd8:	a6 95       	lsr	r26
 cda:	97 95       	ror	r25
 cdc:	87 95       	ror	r24
 cde:	77 95       	ror	r23
 ce0:	67 95       	ror	r22
 ce2:	ba 95       	dec	r27
 ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__ultoa_invert+0x86>
 ce6:	00 97       	sbiw	r24, 0x00	; 0
 ce8:	61 05       	cpc	r22, r1
 cea:	71 05       	cpc	r23, r1
 cec:	08 95       	ret
 cee:	9b 01       	movw	r18, r22
 cf0:	ac 01       	movw	r20, r24
 cf2:	0a 2e       	mov	r0, r26
 cf4:	06 94       	lsr	r0
 cf6:	57 95       	ror	r21
 cf8:	47 95       	ror	r20
 cfa:	37 95       	ror	r19
 cfc:	27 95       	ror	r18
 cfe:	ba 95       	dec	r27
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <__ultoa_invert+0xa2>
 d02:	62 0f       	add	r22, r18
 d04:	73 1f       	adc	r23, r19
 d06:	84 1f       	adc	r24, r20
 d08:	95 1f       	adc	r25, r21
 d0a:	a0 1d       	adc	r26, r0
 d0c:	08 95       	ret

00000d0e <eeprom_read_byte>:
 d0e:	f9 99       	sbic	0x1f, 1	; 31
 d10:	fe cf       	rjmp	.-4      	; 0xd0e <eeprom_read_byte>
 d12:	92 bd       	out	0x22, r25	; 34
 d14:	81 bd       	out	0x21, r24	; 33
 d16:	f8 9a       	sbi	0x1f, 0	; 31
 d18:	99 27       	eor	r25, r25
 d1a:	80 b5       	in	r24, 0x20	; 32
 d1c:	08 95       	ret

00000d1e <eeprom_write_byte>:
 d1e:	26 2f       	mov	r18, r22

00000d20 <eeprom_write_r18>:
 d20:	f9 99       	sbic	0x1f, 1	; 31
 d22:	fe cf       	rjmp	.-4      	; 0xd20 <eeprom_write_r18>
 d24:	1f ba       	out	0x1f, r1	; 31
 d26:	92 bd       	out	0x22, r25	; 34
 d28:	81 bd       	out	0x21, r24	; 33
 d2a:	20 bd       	out	0x20, r18	; 32
 d2c:	0f b6       	in	r0, 0x3f	; 63
 d2e:	f8 94       	cli
 d30:	fa 9a       	sbi	0x1f, 2	; 31
 d32:	f9 9a       	sbi	0x1f, 1	; 31
 d34:	0f be       	out	0x3f, r0	; 63
 d36:	01 96       	adiw	r24, 0x01	; 1
 d38:	08 95       	ret

00000d3a <__divmodsi4>:
 d3a:	05 2e       	mov	r0, r21
 d3c:	97 fb       	bst	r25, 7
 d3e:	1e f4       	brtc	.+6      	; 0xd46 <__divmodsi4+0xc>
 d40:	00 94       	com	r0
 d42:	0e 94 b4 06 	call	0xd68	; 0xd68 <__negsi2>
 d46:	57 fd       	sbrc	r21, 7
 d48:	07 d0       	rcall	.+14     	; 0xd58 <__divmodsi4_neg2>
 d4a:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
 d4e:	07 fc       	sbrc	r0, 7
 d50:	03 d0       	rcall	.+6      	; 0xd58 <__divmodsi4_neg2>
 d52:	4e f4       	brtc	.+18     	; 0xd66 <__divmodsi4_exit>
 d54:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__negsi2>

00000d58 <__divmodsi4_neg2>:
 d58:	50 95       	com	r21
 d5a:	40 95       	com	r20
 d5c:	30 95       	com	r19
 d5e:	21 95       	neg	r18
 d60:	3f 4f       	sbci	r19, 0xFF	; 255
 d62:	4f 4f       	sbci	r20, 0xFF	; 255
 d64:	5f 4f       	sbci	r21, 0xFF	; 255

00000d66 <__divmodsi4_exit>:
 d66:	08 95       	ret

00000d68 <__negsi2>:
 d68:	90 95       	com	r25
 d6a:	80 95       	com	r24
 d6c:	70 95       	com	r23
 d6e:	61 95       	neg	r22
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	08 95       	ret

00000d78 <__muluhisi3>:
 d78:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 d7c:	a5 9f       	mul	r26, r21
 d7e:	90 0d       	add	r25, r0
 d80:	b4 9f       	mul	r27, r20
 d82:	90 0d       	add	r25, r0
 d84:	a4 9f       	mul	r26, r20
 d86:	80 0d       	add	r24, r0
 d88:	91 1d       	adc	r25, r1
 d8a:	11 24       	eor	r1, r1
 d8c:	08 95       	ret

00000d8e <__mulshisi3>:
 d8e:	b7 ff       	sbrs	r27, 7
 d90:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__muluhisi3>

00000d94 <__mulohisi3>:
 d94:	0e 94 bc 06 	call	0xd78	; 0xd78 <__muluhisi3>
 d98:	82 1b       	sub	r24, r18
 d9a:	93 0b       	sbc	r25, r19
 d9c:	08 95       	ret

00000d9e <__prologue_saves__>:
 d9e:	2f 92       	push	r2
 da0:	3f 92       	push	r3
 da2:	4f 92       	push	r4
 da4:	5f 92       	push	r5
 da6:	6f 92       	push	r6
 da8:	7f 92       	push	r7
 daa:	8f 92       	push	r8
 dac:	9f 92       	push	r9
 dae:	af 92       	push	r10
 db0:	bf 92       	push	r11
 db2:	cf 92       	push	r12
 db4:	df 92       	push	r13
 db6:	ef 92       	push	r14
 db8:	ff 92       	push	r15
 dba:	0f 93       	push	r16
 dbc:	1f 93       	push	r17
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
 dc2:	cd b7       	in	r28, 0x3d	; 61
 dc4:	de b7       	in	r29, 0x3e	; 62
 dc6:	ca 1b       	sub	r28, r26
 dc8:	db 0b       	sbc	r29, r27
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	09 94       	ijmp

00000dd6 <__epilogue_restores__>:
 dd6:	2a 88       	ldd	r2, Y+18	; 0x12
 dd8:	39 88       	ldd	r3, Y+17	; 0x11
 dda:	48 88       	ldd	r4, Y+16	; 0x10
 ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dde:	6e 84       	ldd	r6, Y+14	; 0x0e
 de0:	7d 84       	ldd	r7, Y+13	; 0x0d
 de2:	8c 84       	ldd	r8, Y+12	; 0x0c
 de4:	9b 84       	ldd	r9, Y+11	; 0x0b
 de6:	aa 84       	ldd	r10, Y+10	; 0x0a
 de8:	b9 84       	ldd	r11, Y+9	; 0x09
 dea:	c8 84       	ldd	r12, Y+8	; 0x08
 dec:	df 80       	ldd	r13, Y+7	; 0x07
 dee:	ee 80       	ldd	r14, Y+6	; 0x06
 df0:	fd 80       	ldd	r15, Y+5	; 0x05
 df2:	0c 81       	ldd	r16, Y+4	; 0x04
 df4:	1b 81       	ldd	r17, Y+3	; 0x03
 df6:	aa 81       	ldd	r26, Y+2	; 0x02
 df8:	b9 81       	ldd	r27, Y+1	; 0x01
 dfa:	ce 0f       	add	r28, r30
 dfc:	d1 1d       	adc	r29, r1
 dfe:	0f b6       	in	r0, 0x3f	; 63
 e00:	f8 94       	cli
 e02:	de bf       	out	0x3e, r29	; 62
 e04:	0f be       	out	0x3f, r0	; 63
 e06:	cd bf       	out	0x3d, r28	; 61
 e08:	ed 01       	movw	r28, r26
 e0a:	08 95       	ret

00000e0c <__udivmodsi4>:
 e0c:	a1 e2       	ldi	r26, 0x21	; 33
 e0e:	1a 2e       	mov	r1, r26
 e10:	aa 1b       	sub	r26, r26
 e12:	bb 1b       	sub	r27, r27
 e14:	fd 01       	movw	r30, r26
 e16:	0d c0       	rjmp	.+26     	; 0xe32 <__udivmodsi4_ep>

00000e18 <__udivmodsi4_loop>:
 e18:	aa 1f       	adc	r26, r26
 e1a:	bb 1f       	adc	r27, r27
 e1c:	ee 1f       	adc	r30, r30
 e1e:	ff 1f       	adc	r31, r31
 e20:	a2 17       	cp	r26, r18
 e22:	b3 07       	cpc	r27, r19
 e24:	e4 07       	cpc	r30, r20
 e26:	f5 07       	cpc	r31, r21
 e28:	20 f0       	brcs	.+8      	; 0xe32 <__udivmodsi4_ep>
 e2a:	a2 1b       	sub	r26, r18
 e2c:	b3 0b       	sbc	r27, r19
 e2e:	e4 0b       	sbc	r30, r20
 e30:	f5 0b       	sbc	r31, r21

00000e32 <__udivmodsi4_ep>:
 e32:	66 1f       	adc	r22, r22
 e34:	77 1f       	adc	r23, r23
 e36:	88 1f       	adc	r24, r24
 e38:	99 1f       	adc	r25, r25
 e3a:	1a 94       	dec	r1
 e3c:	69 f7       	brne	.-38     	; 0xe18 <__udivmodsi4_loop>
 e3e:	60 95       	com	r22
 e40:	70 95       	com	r23
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	9b 01       	movw	r18, r22
 e48:	ac 01       	movw	r20, r24
 e4a:	bd 01       	movw	r22, r26
 e4c:	cf 01       	movw	r24, r30
 e4e:	08 95       	ret

00000e50 <__umulhisi3>:
 e50:	a2 9f       	mul	r26, r18
 e52:	b0 01       	movw	r22, r0
 e54:	b3 9f       	mul	r27, r19
 e56:	c0 01       	movw	r24, r0
 e58:	a3 9f       	mul	r26, r19
 e5a:	70 0d       	add	r23, r0
 e5c:	81 1d       	adc	r24, r1
 e5e:	11 24       	eor	r1, r1
 e60:	91 1d       	adc	r25, r1
 e62:	b2 9f       	mul	r27, r18
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
