
Assi.9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011a  0080011a  00000b3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed0  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5a  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcc  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000045b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b8  00000000  00000000  000049a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c9  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ds1621_init>:
#include "ds1621.h"

void ds1621_init()
{
	// Set sensor config
	i2c_start_wait(DS1621_adr + I2C_WRITE);
  a6:	80 e9       	ldi	r24, 0x90	; 144
  a8:	0e 94 22 02 	call	0x444	; 0x444 <i2c_start_wait>
	i2c_write(0xAC);
  ac:	8c ea       	ldi	r24, 0xAC	; 172
  ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_write>
	i2c_write(0x20);
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_write>
	// Start temp conversion
	i2c_rep_start(DS1621_adr + I2C_WRITE);
  b8:	80 e9       	ldi	r24, 0x90	; 144
  ba:	0e 94 4a 02 	call	0x494	; 0x494 <i2c_rep_start>
	i2c_write(0xEE);
  be:	8e ee       	ldi	r24, 0xEE	; 238
  c0:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_write>
	i2c_stop();
  c4:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_stop>
  c8:	08 95       	ret

000000ca <LCD_write_PCF8574>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	0e 94 22 02 	call	0x444	; 0x444 <i2c_start_wait>
  d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  d8:	8c 2b       	or	r24, r28
  da:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_write>
  de:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_stop>
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <LCD_pulse_enable_neg>:
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	0e 94 65 00 	call	0xca	; 0xca <LCD_write_PCF8574>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_pulse_enable_neg+0xc>
  f6:	00 00       	nop
  f8:	8c 2f       	mov	r24, r28
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	0e 94 65 00 	call	0xca	; 0xca <LCD_write_PCF8574>
 100:	87 ec       	ldi	r24, 0xC7	; 199
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_pulse_enable_neg+0x1e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_pulse_enable_neg+0x24>
 10a:	00 00       	nop
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_write4bits>:
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
 114:	cd 7f       	andi	r28, 0xFD	; 253
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 65 00 	call	0xca	; 0xca <LCD_write_PCF8574>
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_pulse_enable_neg>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <LCD_send>:
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	d8 2f       	mov	r29, r24
 12c:	c6 2f       	mov	r28, r22
 12e:	c4 60       	ori	r28, 0x04	; 4
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	8c 2b       	or	r24, r28
 134:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 138:	8d 2f       	mov	r24, r29
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	8c 2b       	or	r24, r28
 140:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <LCD_write_char>:
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
 150:	08 95       	ret

00000152 <putchr>:
 152:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_write_char>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret

0000015c <LCD_clear>:
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	86 e7       	ldi	r24, 0x76	; 118
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LCD_clear+0xe>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_clear+0x18>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_set_cursor>:
	_delay_us(30000);  // this command takes a long time!
	#endif
}

void LCD_set_cursor(unsigned char col, unsigned char row)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	28 97       	sbiw	r28, 0x08	; 8
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	int row_offsets[] = { LCD_LINE1, LCD_LINE2, LCD_LINE3, LCD_LINE4 };
 18c:	98 e0       	ldi	r25, 0x08	; 8
 18e:	ee e0       	ldi	r30, 0x0E	; 14
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	de 01       	movw	r26, r28
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	01 90       	ld	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	9a 95       	dec	r25
 19c:	e1 f7       	brne	.-8      	; 0x196 <LCD_set_cursor+0x1e>
	if ( row >= _numlines ) {
 19e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <_numlines>
 1a2:	69 17       	cp	r22, r25
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <LCD_set_cursor+0x32>
		row = _numlines-1;    // we count rows starting w/0
 1a6:	6f ef       	ldi	r22, 0xFF	; 255
 1a8:	69 0f       	add	r22, r25
	}

	LCD_command_write(LCD_DD_RAM_ADDRESS | (col + row_offsets[row]));
 1aa:	e6 2f       	mov	r30, r22
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ec 0f       	add	r30, r28
 1b4:	fd 1f       	adc	r31, r29


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	89 0f       	add	r24, r25
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
	if ( row >= _numlines ) {
		row = _numlines-1;    // we count rows starting w/0
	}

	LCD_command_write(LCD_DD_RAM_ADDRESS | (col + row_offsets[row]));
}
 1c2:	28 96       	adiw	r28, 0x08	; 8
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <LCD_display_off>:

// Turn the display on/off (quickly)
void LCD_display_off(void) {
	_displayfunction &= ~LCD_DISPLAY_ON;
 1d4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_displayfunction>
 1d8:	8b 7f       	andi	r24, 0xFB	; 251
 1da:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_displayfunction>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
 1e6:	08 95       	ret

000001e8 <LCD_display_on>:
	_displayfunction &= ~LCD_DISPLAY_ON;
	LCD_command_write(LCD_DISPLAY_ON_OFF | _displayfunction);
}

void LCD_display_on(void) {
	_displayfunction |= LCD_DISPLAY_ON;
 1e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_displayfunction>
 1ec:	98 2f       	mov	r25, r24
 1ee:	94 60       	ori	r25, 0x04	; 4
 1f0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_displayfunction>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	8c 60       	ori	r24, 0x0C	; 12
 1f8:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
 1fc:	08 95       	ret

000001fe <LCD_init>:

FILE mystdout = FDEV_SETUP_STREAM(putchr, NULL, _FDEV_SETUP_WRITE);

void LCD_init(void){
	
	stdout = &mystdout;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <__iob+0x3>
 206:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__iob+0x2>
	//_backlightval &= ~Bl; // Off at start up
	_backlightval |= Bl; // On at start up
 20a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
	_numlines = LCD_MAX_ROWS;
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_numlines>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	80 e7       	ldi	r24, 0x70	; 112
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <LCD_init+0x22>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_init+0x2c>
 22a:	00 00       	nop
	// Ensure supply rails are up before config sequence
	_delay_us(50000);

	// Set all control and data lines low. D4 - D7, En (High=1), Rw (Low = 0 or Write), Rs (Control/Instruction) (Low = 0 or Control)
	//I2C_Write_Byte_Single_Reg(LCD_PCF8574_ADDR, LCD_INIT); // Backlight off (Bit 3 = 0)
	i2c_start_wait(LCD_PCF8574_ADDR + I2C_WRITE);
 22c:	8e e4       	ldi	r24, 0x4E	; 78
 22e:	0e 94 22 02 	call	0x444	; 0x444 <i2c_start_wait>
	i2c_write(LCD_INIT);
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 56 02 	call	0x4ac	; 0x4ac <i2c_write>
 238:	8f e8       	ldi	r24, 0x8F	; 143
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_init+0x3e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_init+0x44>
 242:	00 00       	nop
	_delay_us(100);

	// Sequence to put the LCD into 4 bit mode this is according to the hitachi HD44780 datasheet page 109

	// we start in 8bit mode
	LCD_write4bits(LCD_8BIT_INIT);
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 24a:	8f e4       	ldi	r24, 0x4F	; 79
 24c:	96 e4       	ldi	r25, 0x46	; 70
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_init+0x50>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_init+0x56>
 254:	00 00       	nop
	_delay_us(4500);  // wait more than 4.1ms

	// second write
	LCD_write4bits(LCD_8BIT_INIT);
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 25c:	87 e5       	ldi	r24, 0x57	; 87
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_init+0x62>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_init+0x68>
 266:	00 00       	nop
	_delay_us(150); // wait > 100us

	// third write
	LCD_write4bits(LCD_8BIT_INIT);
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 26e:	87 e5       	ldi	r24, 0x57	; 87
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_init+0x74>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0x7a>
 278:	00 00       	nop
	_delay_us(150);

	// now set to 4-bit interface
	LCD_write4bits(LCD_4BIT_INIT);
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_write4bits>
 280:	87 e5       	ldi	r24, 0x57	; 87
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_init+0x86>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_init+0x8c>
 28a:	00 00       	nop


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
	// set # lines, font size, etc.
	_functionset = LCD_INTF4BITS | LCD_TWO_LINES | LCD_FONT_5_7;
	LCD_command_write(LCD_FUNCTION_SET | _functionset);
	//DelayMicroseconds(150);

	_displayfunction = LCD_DISPLAY_OFF | LCD_CURSOR_OFF | LCD_BLINKING_OFF;
 294:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_displayfunction>
	LCD_display_off();
 298:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_display_off>

	// turn the display on with no cursor or blinking default
	LCD_display_on();
 29c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_display_on>

	// set the entry mode
	_entrymodeset = LCD_INCREMENT | LCD_SHIFT_OFF; // Initialize to default text direction (for roman languages)
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_entrymodeset>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
 2ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_displayfunction>
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
	// Display Function set
	// _displayfunction = LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINKING_OFF;
	LCD_command_write(LCD_DISPLAY_ON_OFF | _displayfunction);

	// Display Control set
	_displaycontrol = LCD_DISPLAY_SHIFT | LCD_SHIFT_LEFT;
 2ba:	88 e0       	ldi	r24, 0x08	; 8
 2bc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_displaycontrol>


/*********** mid level commands, for sending data/cmds */

inline void LCD_command_write(unsigned char value) {
	LCD_send(value, Rs & ~Rs);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	88 e1       	ldi	r24, 0x18	; 24
 2c4:	0e 94 93 00 	call	0x126	; 0x126 <LCD_send>
	// Display Control set
	_displaycontrol = LCD_DISPLAY_SHIFT | LCD_SHIFT_LEFT;
	LCD_command_write(LCD_MV_CUR_SHIFT_DISPLAY | _displaycontrol);

	// clear display and return cursor to home position. (Address 0)
	LCD_clear();
 2c8:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_clear>
 2cc:	08 95       	ret

000002ce <main>:

#include "i2cmaster.h"
#include "ds1621.h"

int main (void){
	i2c_init();
 2ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <i2c_init>
	LCD_init();
 2d2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_init>
	ds1621_init();
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <ds1621_init>
	
	DDRD = 0xFF;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xF0;
 2de:	80 ef       	ldi	r24, 0xF0	; 240
 2e0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0F;
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	88 b9       	out	0x08, r24	; 8
	
	int last_bit = 0;	
	
	PORTD = 0b00000000;
 2e6:	1b b8       	out	0x0b, r1	; 11
	
	DDRD = 0xFF;
	DDRC = 0xF0;
	PORTC = 0x0F;
	
	int last_bit = 0;	
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		
		if (PINC == 0b00111110)
			{
			last_bit = 1;
			PORTD = 0b10000000;
 2ec:	68 94       	set
 2ee:	ff 24       	eor	r15, r15
 2f0:	f7 f8       	bld	r15, 7
	
	while(1){
		
		if (PINC == 0b00111110)
			{
			last_bit = 1;
 2f2:	99 24       	eor	r9, r9
 2f4:	93 94       	inc	r9
 2f6:	a1 2c       	mov	r10, r1
			PORTD = 0b10000000;
			}
		
		if (PINC == 0b00111101){
			last_bit = 2;
 2f8:	68 94       	set
 2fa:	bb 24       	eor	r11, r11
 2fc:	b1 f8       	bld	r11, 1
 2fe:	c1 2c       	mov	r12, r1
		if (PINC == 0b00111011){
			last_bit = 3;
			PORTD = 0b10000000;}
		
		if (PINC == 0b00110111){
			last_bit = 4;
 300:	68 94       	set
 302:	dd 24       	eor	r13, r13
 304:	d2 f8       	bld	r13, 2
 306:	e1 2c       	mov	r14, r1
		if (PINC == 0b00111101){
			last_bit = 2;
			PORTD = 0b10000000;}
		
		if (PINC == 0b00111011){
			last_bit = 3;
 308:	0f 2e       	mov	r0, r31
 30a:	f3 e0       	ldi	r31, 0x03	; 3
 30c:	7f 2e       	mov	r7, r31
 30e:	f0 2d       	mov	r31, r0
 310:	81 2c       	mov	r8, r1
		PORTD = PORTD>>1;
		
		if (PORTD == 0b00001000)
			PORTD = 0b10000000;
	LCD_set_cursor(0,0);
	printf("%d", last_bit);
 312:	06 e1       	ldi	r16, 0x16	; 22
 314:	11 e0       	ldi	r17, 0x01	; 1
	PORTD = 0b00000000;

	
	while(1){
		
		if (PINC == 0b00111110)
 316:	86 b1       	in	r24, 0x06	; 6
 318:	8e 33       	cpi	r24, 0x3E	; 62
 31a:	19 f4       	brne	.+6      	; 0x322 <main+0x54>
			{
			last_bit = 1;
			PORTD = 0b10000000;
 31c:	fb b8       	out	0x0b, r15	; 11
	
	while(1){
		
		if (PINC == 0b00111110)
			{
			last_bit = 1;
 31e:	c9 2d       	mov	r28, r9
 320:	da 2d       	mov	r29, r10
			PORTD = 0b10000000;
			}
		
		if (PINC == 0b00111101){
 322:	86 b1       	in	r24, 0x06	; 6
 324:	8d 33       	cpi	r24, 0x3D	; 61
 326:	19 f4       	brne	.+6      	; 0x32e <main+0x60>
			last_bit = 2;
			PORTD = 0b10000000;}
 328:	fb b8       	out	0x0b, r15	; 11
			last_bit = 1;
			PORTD = 0b10000000;
			}
		
		if (PINC == 0b00111101){
			last_bit = 2;
 32a:	cb 2d       	mov	r28, r11
 32c:	dc 2d       	mov	r29, r12
			PORTD = 0b10000000;}
		
		if (PINC == 0b00111011){
 32e:	86 b1       	in	r24, 0x06	; 6
 330:	8b 33       	cpi	r24, 0x3B	; 59
 332:	39 f4       	brne	.+14     	; 0x342 <main+0x74>
			last_bit = 3;
			PORTD = 0b10000000;}
 334:	fb b8       	out	0x0b, r15	; 11
		
		if (PINC == 0b00110111){
 336:	86 b1       	in	r24, 0x06	; 6
 338:	87 33       	cpi	r24, 0x37	; 55
 33a:	31 f0       	breq	.+12     	; 0x348 <main+0x7a>
		if (PINC == 0b00111101){
			last_bit = 2;
			PORTD = 0b10000000;}
		
		if (PINC == 0b00111011){
			last_bit = 3;
 33c:	c7 2d       	mov	r28, r7
 33e:	d8 2d       	mov	r29, r8
 340:	21 c0       	rjmp	.+66     	; 0x384 <main+0xb6>
			PORTD = 0b10000000;}
		
		if (PINC == 0b00110111){
 342:	86 b1       	in	r24, 0x06	; 6
 344:	87 33       	cpi	r24, 0x37	; 55
 346:	21 f4       	brne	.+8      	; 0x350 <main+0x82>
			last_bit = 4;
			PORTD = 0b10000000;
 348:	fb b8       	out	0x0b, r15	; 11
		if (PINC == 0b00111011){
			last_bit = 3;
			PORTD = 0b10000000;}
		
		if (PINC == 0b00110111){
			last_bit = 4;
 34a:	cd 2d       	mov	r28, r13
 34c:	de 2d       	mov	r29, r14
 34e:	1a c0       	rjmp	.+52     	; 0x384 <main+0xb6>
			PORTD = 0b10000000;
		}
		
		if (last_bit == 1)
 350:	c1 30       	cpi	r28, 0x01	; 1
 352:	d1 05       	cpc	r29, r1
 354:	51 f4       	brne	.+20     	; 0x36a <main+0x9c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	29 e6       	ldi	r18, 0x69	; 105
 35a:	88 e1       	ldi	r24, 0x18	; 24
 35c:	91 50       	subi	r25, 0x01	; 1
 35e:	20 40       	sbci	r18, 0x00	; 0
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x8e>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x98>
 366:	00 00       	nop
 368:	1a c0       	rjmp	.+52     	; 0x39e <main+0xd0>
			_delay_ms(500);
			
		if (last_bit == 2)
 36a:	c2 30       	cpi	r28, 0x02	; 2
 36c:	d1 05       	cpc	r29, r1
 36e:	51 f4       	brne	.+20     	; 0x384 <main+0xb6>
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	23 ed       	ldi	r18, 0xD3	; 211
 374:	80 e3       	ldi	r24, 0x30	; 48
 376:	91 50       	subi	r25, 0x01	; 1
 378:	20 40       	sbci	r18, 0x00	; 0
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0xa8>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xb2>
 380:	00 00       	nop
 382:	1a c0       	rjmp	.+52     	; 0x3b8 <main+0xea>
			_delay_ms(1000);
			
		if (last_bit == 3)
 384:	c3 30       	cpi	r28, 0x03	; 3
 386:	d1 05       	cpc	r29, r1
 388:	51 f4       	brne	.+20     	; 0x39e <main+0xd0>
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	2d e3       	ldi	r18, 0x3D	; 61
 38e:	89 e4       	ldi	r24, 0x49	; 73
 390:	91 50       	subi	r25, 0x01	; 1
 392:	20 40       	sbci	r18, 0x00	; 0
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0xc2>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0xcc>
 39a:	00 00       	nop
 39c:	10 c0       	rjmp	.+32     	; 0x3be <main+0xf0>
			_delay_ms(1500);
			
		if (last_bit == 4)
 39e:	c4 30       	cpi	r28, 0x04	; 4
 3a0:	d1 05       	cpc	r29, r1
 3a2:	51 f4       	brne	.+20     	; 0x3b8 <main+0xea>
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	27 ea       	ldi	r18, 0xA7	; 167
 3a8:	81 e6       	ldi	r24, 0x61	; 97
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0xdc>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xe6>
 3b4:	00 00       	nop
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <main+0xf0>
			_delay_ms(2000);
			
		if (last_bit==0)
 3b8:	20 97       	sbiw	r28, 0x00	; 0
 3ba:	09 f4       	brne	.+2      	; 0x3be <main+0xf0>
			PORTD = 0x00;
 3bc:	1b b8       	out	0x0b, r1	; 11
			
		PORTD = PORTD>>1;
 3be:	8b b1       	in	r24, 0x0b	; 11
 3c0:	86 95       	lsr	r24
 3c2:	8b b9       	out	0x0b, r24	; 11
		
		if (PORTD == 0b00001000)
 3c4:	8b b1       	in	r24, 0x0b	; 11
 3c6:	88 30       	cpi	r24, 0x08	; 8
 3c8:	09 f4       	brne	.+2      	; 0x3cc <main+0xfe>
			PORTD = 0b10000000;
 3ca:	fb b8       	out	0x0b, r15	; 11
	LCD_set_cursor(0,0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_set_cursor>
	printf("%d", last_bit);
 3d4:	df 93       	push	r29
 3d6:	cf 93       	push	r28
 3d8:	1f 93       	push	r17
 3da:	0f 93       	push	r16
 3dc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printf>
	}
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	96 cf       	rjmp	.-212    	; 0x316 <main+0x48>

000003ea <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 3ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((CPU_CLOCK/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 3ee:	88 e4       	ldi	r24, 0x48	; 72
 3f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 3f4:	08 95       	ret

000003f6 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 3f6:	94 ea       	ldi	r25, 0xA4	; 164
 3f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 3fc:	ec eb       	ldi	r30, 0xBC	; 188
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	90 81       	ld	r25, Z
 402:	99 23       	and	r25, r25
 404:	ec f7       	brge	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 406:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 40a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 40c:	98 30       	cpi	r25, 0x08	; 8
 40e:	11 f0       	breq	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	90 31       	cpi	r25, 0x10	; 16
 412:	a1 f4       	brne	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

	// send device address
	TWDR = address;
 414:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 418:	84 e8       	ldi	r24, 0x84	; 132
 41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 41e:	ec eb       	ldi	r30, 0xBC	; 188
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	88 23       	and	r24, r24
 426:	ec f7       	brge	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 428:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 42c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 42e:	98 31       	cpi	r25, 0x18	; 24
 430:	39 f0       	breq	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 34       	cpi	r25, 0x40	; 64
 436:	29 f4       	brne	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 440:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 442:	08 95       	ret

00000444 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 444:	cf 93       	push	r28
 446:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 448:	ec eb       	ldi	r30, 0xBC	; 188
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 44e:	a9 eb       	ldi	r26, 0xB9	; 185
 450:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 452:	cb eb       	ldi	r28, 0xBB	; 187
 454:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 456:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 458:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 45a:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 45c:	90 81       	ld	r25, Z
 45e:	99 23       	and	r25, r25
 460:	ec f7       	brge	.-6      	; 0x45c <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 462:	9c 91       	ld	r25, X
 464:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 466:	98 30       	cpi	r25, 0x08	; 8
 468:	11 f0       	breq	.+4      	; 0x46e <i2c_start_wait+0x2a>
 46a:	90 31       	cpi	r25, 0x10	; 16
 46c:	b1 f7       	brne	.-20     	; 0x45a <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 46e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 470:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 472:	90 81       	ld	r25, Z
 474:	99 23       	and	r25, r25
 476:	ec f7       	brge	.-6      	; 0x472 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 478:	9c 91       	ld	r25, X
 47a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 47c:	90 32       	cpi	r25, 0x20	; 32
 47e:	11 f0       	breq	.+4      	; 0x484 <i2c_start_wait+0x40>
 480:	98 35       	cpi	r25, 0x58	; 88
 482:	29 f4       	brne	.+10     	; 0x48e <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 484:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 486:	90 81       	ld	r25, Z
 488:	94 fd       	sbrc	r25, 4
 48a:	fd cf       	rjmp	.-6      	; 0x486 <i2c_start_wait+0x42>
 48c:	e6 cf       	rjmp	.-52     	; 0x45a <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 494:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_start>

}/* i2c_rep_start */
 498:	08 95       	ret

0000049a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 49a:	84 e9       	ldi	r24, 0x94	; 148
 49c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 4a0:	ec eb       	ldi	r30, 0xBC	; 188
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	84 fd       	sbrc	r24, 4
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <i2c_stop+0xa>

}/* i2c_stop */
 4aa:	08 95       	ret

000004ac <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 4ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 4b0:	84 e8       	ldi	r24, 0x84	; 132
 4b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 4b6:	ec eb       	ldi	r30, 0xBC	; 188
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	88 23       	and	r24, r24
 4be:	ec f7       	brge	.-6      	; 0x4ba <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 4c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 4c4:	98 7f       	andi	r25, 0xF8	; 248
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	98 32       	cpi	r25, 0x28	; 40
 4ca:	09 f4       	brne	.+2      	; 0x4ce <i2c_write+0x22>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 4ce:	08 95       	ret

000004d0 <printf>:
 4d0:	a0 e0       	ldi	r26, 0x00	; 0
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	ee e6       	ldi	r30, 0x6E	; 110
 4d6:	f2 e0       	ldi	r31, 0x02	; 2
 4d8:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__prologue_saves__+0x20>
 4dc:	ae 01       	movw	r20, r28
 4de:	4b 5f       	subi	r20, 0xFB	; 251
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	fa 01       	movw	r30, r20
 4e4:	61 91       	ld	r22, Z+
 4e6:	71 91       	ld	r23, Z+
 4e8:	af 01       	movw	r20, r30
 4ea:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__iob+0x2>
 4ee:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__iob+0x3>
 4f2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vfprintf>
 4f6:	e2 e0       	ldi	r30, 0x02	; 2
 4f8:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__epilogue_restores__+0x20>

000004fc <vfprintf>:
 4fc:	ab e0       	ldi	r26, 0x0B	; 11
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e4 e8       	ldi	r30, 0x84	; 132
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__prologue_saves__>
 508:	6c 01       	movw	r12, r24
 50a:	7b 01       	movw	r14, r22
 50c:	8a 01       	movw	r16, r20
 50e:	fc 01       	movw	r30, r24
 510:	17 82       	std	Z+7, r1	; 0x07
 512:	16 82       	std	Z+6, r1	; 0x06
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	81 ff       	sbrs	r24, 1
 518:	cc c1       	rjmp	.+920    	; 0x8b2 <vfprintf+0x3b6>
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	3c 01       	movw	r6, r24
 520:	f6 01       	movw	r30, r12
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	f7 01       	movw	r30, r14
 526:	93 fd       	sbrc	r25, 3
 528:	85 91       	lpm	r24, Z+
 52a:	93 ff       	sbrs	r25, 3
 52c:	81 91       	ld	r24, Z+
 52e:	7f 01       	movw	r14, r30
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <vfprintf+0x3a>
 534:	ba c1       	rjmp	.+884    	; 0x8aa <vfprintf+0x3ae>
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	39 f4       	brne	.+14     	; 0x548 <vfprintf+0x4c>
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	7f 01       	movw	r14, r30
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0x56>
 548:	b6 01       	movw	r22, r12
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 550:	e7 cf       	rjmp	.-50     	; 0x520 <vfprintf+0x24>
 552:	91 2c       	mov	r9, r1
 554:	21 2c       	mov	r2, r1
 556:	31 2c       	mov	r3, r1
 558:	ff e1       	ldi	r31, 0x1F	; 31
 55a:	f3 15       	cp	r31, r3
 55c:	d8 f0       	brcs	.+54     	; 0x594 <vfprintf+0x98>
 55e:	8b 32       	cpi	r24, 0x2B	; 43
 560:	79 f0       	breq	.+30     	; 0x580 <vfprintf+0x84>
 562:	38 f4       	brcc	.+14     	; 0x572 <vfprintf+0x76>
 564:	80 32       	cpi	r24, 0x20	; 32
 566:	79 f0       	breq	.+30     	; 0x586 <vfprintf+0x8a>
 568:	83 32       	cpi	r24, 0x23	; 35
 56a:	a1 f4       	brne	.+40     	; 0x594 <vfprintf+0x98>
 56c:	23 2d       	mov	r18, r3
 56e:	20 61       	ori	r18, 0x10	; 16
 570:	1d c0       	rjmp	.+58     	; 0x5ac <vfprintf+0xb0>
 572:	8d 32       	cpi	r24, 0x2D	; 45
 574:	61 f0       	breq	.+24     	; 0x58e <vfprintf+0x92>
 576:	80 33       	cpi	r24, 0x30	; 48
 578:	69 f4       	brne	.+26     	; 0x594 <vfprintf+0x98>
 57a:	23 2d       	mov	r18, r3
 57c:	21 60       	ori	r18, 0x01	; 1
 57e:	16 c0       	rjmp	.+44     	; 0x5ac <vfprintf+0xb0>
 580:	83 2d       	mov	r24, r3
 582:	82 60       	ori	r24, 0x02	; 2
 584:	38 2e       	mov	r3, r24
 586:	e3 2d       	mov	r30, r3
 588:	e4 60       	ori	r30, 0x04	; 4
 58a:	3e 2e       	mov	r3, r30
 58c:	2a c0       	rjmp	.+84     	; 0x5e2 <vfprintf+0xe6>
 58e:	f3 2d       	mov	r31, r3
 590:	f8 60       	ori	r31, 0x08	; 8
 592:	1d c0       	rjmp	.+58     	; 0x5ce <vfprintf+0xd2>
 594:	37 fc       	sbrc	r3, 7
 596:	2d c0       	rjmp	.+90     	; 0x5f2 <vfprintf+0xf6>
 598:	20 ed       	ldi	r18, 0xD0	; 208
 59a:	28 0f       	add	r18, r24
 59c:	2a 30       	cpi	r18, 0x0A	; 10
 59e:	40 f0       	brcs	.+16     	; 0x5b0 <vfprintf+0xb4>
 5a0:	8e 32       	cpi	r24, 0x2E	; 46
 5a2:	b9 f4       	brne	.+46     	; 0x5d2 <vfprintf+0xd6>
 5a4:	36 fc       	sbrc	r3, 6
 5a6:	81 c1       	rjmp	.+770    	; 0x8aa <vfprintf+0x3ae>
 5a8:	23 2d       	mov	r18, r3
 5aa:	20 64       	ori	r18, 0x40	; 64
 5ac:	32 2e       	mov	r3, r18
 5ae:	19 c0       	rjmp	.+50     	; 0x5e2 <vfprintf+0xe6>
 5b0:	36 fe       	sbrs	r3, 6
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <vfprintf+0xc4>
 5b4:	8a e0       	ldi	r24, 0x0A	; 10
 5b6:	98 9e       	mul	r9, r24
 5b8:	20 0d       	add	r18, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	92 2e       	mov	r9, r18
 5be:	11 c0       	rjmp	.+34     	; 0x5e2 <vfprintf+0xe6>
 5c0:	ea e0       	ldi	r30, 0x0A	; 10
 5c2:	2e 9e       	mul	r2, r30
 5c4:	20 0d       	add	r18, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	22 2e       	mov	r2, r18
 5ca:	f3 2d       	mov	r31, r3
 5cc:	f0 62       	ori	r31, 0x20	; 32
 5ce:	3f 2e       	mov	r3, r31
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <vfprintf+0xe6>
 5d2:	8c 36       	cpi	r24, 0x6C	; 108
 5d4:	21 f4       	brne	.+8      	; 0x5de <vfprintf+0xe2>
 5d6:	83 2d       	mov	r24, r3
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	38 2e       	mov	r3, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0xe6>
 5de:	88 36       	cpi	r24, 0x68	; 104
 5e0:	41 f4       	brne	.+16     	; 0x5f2 <vfprintf+0xf6>
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	81 11       	cpse	r24, r1
 5f0:	b3 cf       	rjmp	.-154    	; 0x558 <vfprintf+0x5c>
 5f2:	98 2f       	mov	r25, r24
 5f4:	9f 7d       	andi	r25, 0xDF	; 223
 5f6:	95 54       	subi	r25, 0x45	; 69
 5f8:	93 30       	cpi	r25, 0x03	; 3
 5fa:	28 f4       	brcc	.+10     	; 0x606 <vfprintf+0x10a>
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	9f e3       	ldi	r25, 0x3F	; 63
 602:	99 83       	std	Y+1, r25	; 0x01
 604:	0d c0       	rjmp	.+26     	; 0x620 <vfprintf+0x124>
 606:	83 36       	cpi	r24, 0x63	; 99
 608:	31 f0       	breq	.+12     	; 0x616 <vfprintf+0x11a>
 60a:	83 37       	cpi	r24, 0x73	; 115
 60c:	71 f0       	breq	.+28     	; 0x62a <vfprintf+0x12e>
 60e:	83 35       	cpi	r24, 0x53	; 83
 610:	09 f0       	breq	.+2      	; 0x614 <vfprintf+0x118>
 612:	59 c0       	rjmp	.+178    	; 0x6c6 <vfprintf+0x1ca>
 614:	21 c0       	rjmp	.+66     	; 0x658 <vfprintf+0x15c>
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	0e 5f       	subi	r16, 0xFE	; 254
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	88 24       	eor	r8, r8
 622:	83 94       	inc	r8
 624:	91 2c       	mov	r9, r1
 626:	53 01       	movw	r10, r6
 628:	13 c0       	rjmp	.+38     	; 0x650 <vfprintf+0x154>
 62a:	28 01       	movw	r4, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	4f 0e       	add	r4, r31
 630:	51 1c       	adc	r5, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	36 fe       	sbrs	r3, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x146>
 63c:	69 2d       	mov	r22, r9
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x14a>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <strnlen>
 64c:	4c 01       	movw	r8, r24
 64e:	82 01       	movw	r16, r4
 650:	f3 2d       	mov	r31, r3
 652:	ff 77       	andi	r31, 0x7F	; 127
 654:	3f 2e       	mov	r3, r31
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0x188>
 658:	28 01       	movw	r4, r16
 65a:	22 e0       	ldi	r18, 0x02	; 2
 65c:	42 0e       	add	r4, r18
 65e:	51 1c       	adc	r5, r1
 660:	f8 01       	movw	r30, r16
 662:	a0 80       	ld	r10, Z
 664:	b1 80       	ldd	r11, Z+1	; 0x01
 666:	36 fe       	sbrs	r3, 6
 668:	03 c0       	rjmp	.+6      	; 0x670 <vfprintf+0x174>
 66a:	69 2d       	mov	r22, r9
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0x178>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	7f ef       	ldi	r23, 0xFF	; 255
 674:	c5 01       	movw	r24, r10
 676:	0e 94 5f 04 	call	0x8be	; 0x8be <strnlen_P>
 67a:	4c 01       	movw	r8, r24
 67c:	f3 2d       	mov	r31, r3
 67e:	f0 68       	ori	r31, 0x80	; 128
 680:	3f 2e       	mov	r3, r31
 682:	82 01       	movw	r16, r4
 684:	33 fc       	sbrc	r3, 3
 686:	1b c0       	rjmp	.+54     	; 0x6be <vfprintf+0x1c2>
 688:	82 2d       	mov	r24, r2
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	88 16       	cp	r8, r24
 68e:	99 06       	cpc	r9, r25
 690:	b0 f4       	brcc	.+44     	; 0x6be <vfprintf+0x1c2>
 692:	b6 01       	movw	r22, r12
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 69c:	2a 94       	dec	r2
 69e:	f4 cf       	rjmp	.-24     	; 0x688 <vfprintf+0x18c>
 6a0:	f5 01       	movw	r30, r10
 6a2:	37 fc       	sbrc	r3, 7
 6a4:	85 91       	lpm	r24, Z+
 6a6:	37 fe       	sbrs	r3, 7
 6a8:	81 91       	ld	r24, Z+
 6aa:	5f 01       	movw	r10, r30
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 6b4:	21 10       	cpse	r2, r1
 6b6:	2a 94       	dec	r2
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	82 1a       	sub	r8, r18
 6bc:	91 08       	sbc	r9, r1
 6be:	81 14       	cp	r8, r1
 6c0:	91 04       	cpc	r9, r1
 6c2:	71 f7       	brne	.-36     	; 0x6a0 <vfprintf+0x1a4>
 6c4:	e8 c0       	rjmp	.+464    	; 0x896 <vfprintf+0x39a>
 6c6:	84 36       	cpi	r24, 0x64	; 100
 6c8:	11 f0       	breq	.+4      	; 0x6ce <vfprintf+0x1d2>
 6ca:	89 36       	cpi	r24, 0x69	; 105
 6cc:	41 f5       	brne	.+80     	; 0x71e <vfprintf+0x222>
 6ce:	f8 01       	movw	r30, r16
 6d0:	37 fe       	sbrs	r3, 7
 6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <vfprintf+0x1e6>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	93 81       	ldd	r25, Z+3	; 0x03
 6dc:	0c 5f       	subi	r16, 0xFC	; 252
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <vfprintf+0x1f6>
 6e2:	60 81       	ld	r22, Z
 6e4:	71 81       	ldd	r23, Z+1	; 0x01
 6e6:	07 2e       	mov	r0, r23
 6e8:	00 0c       	add	r0, r0
 6ea:	88 0b       	sbc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	0e 5f       	subi	r16, 0xFE	; 254
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	f3 2d       	mov	r31, r3
 6f4:	ff 76       	andi	r31, 0x6F	; 111
 6f6:	3f 2e       	mov	r3, r31
 6f8:	97 ff       	sbrs	r25, 7
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <vfprintf+0x212>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	f0 68       	ori	r31, 0x80	; 128
 70c:	3f 2e       	mov	r3, r31
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	a3 01       	movw	r20, r6
 714:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 718:	88 2e       	mov	r8, r24
 71a:	86 18       	sub	r8, r6
 71c:	45 c0       	rjmp	.+138    	; 0x7a8 <vfprintf+0x2ac>
 71e:	85 37       	cpi	r24, 0x75	; 117
 720:	31 f4       	brne	.+12     	; 0x72e <vfprintf+0x232>
 722:	23 2d       	mov	r18, r3
 724:	2f 7e       	andi	r18, 0xEF	; 239
 726:	b2 2e       	mov	r11, r18
 728:	2a e0       	ldi	r18, 0x0A	; 10
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	25 c0       	rjmp	.+74     	; 0x778 <vfprintf+0x27c>
 72e:	93 2d       	mov	r25, r3
 730:	99 7f       	andi	r25, 0xF9	; 249
 732:	b9 2e       	mov	r11, r25
 734:	8f 36       	cpi	r24, 0x6F	; 111
 736:	c1 f0       	breq	.+48     	; 0x768 <vfprintf+0x26c>
 738:	18 f4       	brcc	.+6      	; 0x740 <vfprintf+0x244>
 73a:	88 35       	cpi	r24, 0x58	; 88
 73c:	79 f0       	breq	.+30     	; 0x75c <vfprintf+0x260>
 73e:	b5 c0       	rjmp	.+362    	; 0x8aa <vfprintf+0x3ae>
 740:	80 37       	cpi	r24, 0x70	; 112
 742:	19 f0       	breq	.+6      	; 0x74a <vfprintf+0x24e>
 744:	88 37       	cpi	r24, 0x78	; 120
 746:	21 f0       	breq	.+8      	; 0x750 <vfprintf+0x254>
 748:	b0 c0       	rjmp	.+352    	; 0x8aa <vfprintf+0x3ae>
 74a:	e9 2f       	mov	r30, r25
 74c:	e0 61       	ori	r30, 0x10	; 16
 74e:	be 2e       	mov	r11, r30
 750:	b4 fe       	sbrs	r11, 4
 752:	0d c0       	rjmp	.+26     	; 0x76e <vfprintf+0x272>
 754:	fb 2d       	mov	r31, r11
 756:	f4 60       	ori	r31, 0x04	; 4
 758:	bf 2e       	mov	r11, r31
 75a:	09 c0       	rjmp	.+18     	; 0x76e <vfprintf+0x272>
 75c:	34 fe       	sbrs	r3, 4
 75e:	0a c0       	rjmp	.+20     	; 0x774 <vfprintf+0x278>
 760:	29 2f       	mov	r18, r25
 762:	26 60       	ori	r18, 0x06	; 6
 764:	b2 2e       	mov	r11, r18
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0x278>
 768:	28 e0       	ldi	r18, 0x08	; 8
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	05 c0       	rjmp	.+10     	; 0x778 <vfprintf+0x27c>
 76e:	20 e1       	ldi	r18, 0x10	; 16
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x27c>
 774:	20 e1       	ldi	r18, 0x10	; 16
 776:	32 e0       	ldi	r19, 0x02	; 2
 778:	f8 01       	movw	r30, r16
 77a:	b7 fe       	sbrs	r11, 7
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0x290>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x29c>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 5f       	subi	r16, 0xFE	; 254
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	a3 01       	movw	r20, r6
 79a:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 79e:	88 2e       	mov	r8, r24
 7a0:	86 18       	sub	r8, r6
 7a2:	fb 2d       	mov	r31, r11
 7a4:	ff 77       	andi	r31, 0x7F	; 127
 7a6:	3f 2e       	mov	r3, r31
 7a8:	36 fe       	sbrs	r3, 6
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <vfprintf+0x2ca>
 7ac:	23 2d       	mov	r18, r3
 7ae:	2e 7f       	andi	r18, 0xFE	; 254
 7b0:	a2 2e       	mov	r10, r18
 7b2:	89 14       	cp	r8, r9
 7b4:	58 f4       	brcc	.+22     	; 0x7cc <vfprintf+0x2d0>
 7b6:	34 fe       	sbrs	r3, 4
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <vfprintf+0x2d4>
 7ba:	32 fc       	sbrc	r3, 2
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x2d4>
 7be:	83 2d       	mov	r24, r3
 7c0:	8e 7e       	andi	r24, 0xEE	; 238
 7c2:	a8 2e       	mov	r10, r24
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <vfprintf+0x2d4>
 7c6:	b8 2c       	mov	r11, r8
 7c8:	a3 2c       	mov	r10, r3
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x2d6>
 7cc:	b8 2c       	mov	r11, r8
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vfprintf+0x2d6>
 7d0:	b9 2c       	mov	r11, r9
 7d2:	a4 fe       	sbrs	r10, 4
 7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <vfprintf+0x2f8>
 7d6:	fe 01       	movw	r30, r28
 7d8:	e8 0d       	add	r30, r8
 7da:	f1 1d       	adc	r31, r1
 7dc:	80 81       	ld	r24, Z
 7de:	80 33       	cpi	r24, 0x30	; 48
 7e0:	21 f4       	brne	.+8      	; 0x7ea <vfprintf+0x2ee>
 7e2:	9a 2d       	mov	r25, r10
 7e4:	99 7e       	andi	r25, 0xE9	; 233
 7e6:	a9 2e       	mov	r10, r25
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x300>
 7ea:	a2 fe       	sbrs	r10, 2
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x2fe>
 7ee:	b3 94       	inc	r11
 7f0:	b3 94       	inc	r11
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <vfprintf+0x300>
 7f4:	8a 2d       	mov	r24, r10
 7f6:	86 78       	andi	r24, 0x86	; 134
 7f8:	09 f0       	breq	.+2      	; 0x7fc <vfprintf+0x300>
 7fa:	b3 94       	inc	r11
 7fc:	a3 fc       	sbrc	r10, 3
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <vfprintf+0x326>
 800:	a0 fe       	sbrs	r10, 0
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0x314>
 804:	b2 14       	cp	r11, r2
 806:	88 f4       	brcc	.+34     	; 0x82a <vfprintf+0x32e>
 808:	28 0c       	add	r2, r8
 80a:	92 2c       	mov	r9, r2
 80c:	9b 18       	sub	r9, r11
 80e:	0e c0       	rjmp	.+28     	; 0x82c <vfprintf+0x330>
 810:	b2 14       	cp	r11, r2
 812:	60 f4       	brcc	.+24     	; 0x82c <vfprintf+0x330>
 814:	b6 01       	movw	r22, r12
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 81e:	b3 94       	inc	r11
 820:	f7 cf       	rjmp	.-18     	; 0x810 <vfprintf+0x314>
 822:	b2 14       	cp	r11, r2
 824:	18 f4       	brcc	.+6      	; 0x82c <vfprintf+0x330>
 826:	2b 18       	sub	r2, r11
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x332>
 82a:	98 2c       	mov	r9, r8
 82c:	21 2c       	mov	r2, r1
 82e:	a4 fe       	sbrs	r10, 4
 830:	10 c0       	rjmp	.+32     	; 0x852 <vfprintf+0x356>
 832:	b6 01       	movw	r22, r12
 834:	80 e3       	ldi	r24, 0x30	; 48
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 83c:	a2 fe       	sbrs	r10, 2
 83e:	17 c0       	rjmp	.+46     	; 0x86e <vfprintf+0x372>
 840:	a1 fc       	sbrc	r10, 1
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x34e>
 844:	88 e7       	ldi	r24, 0x78	; 120
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x352>
 84a:	88 e5       	ldi	r24, 0x58	; 88
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	b6 01       	movw	r22, r12
 850:	0c c0       	rjmp	.+24     	; 0x86a <vfprintf+0x36e>
 852:	8a 2d       	mov	r24, r10
 854:	86 78       	andi	r24, 0x86	; 134
 856:	59 f0       	breq	.+22     	; 0x86e <vfprintf+0x372>
 858:	a1 fe       	sbrs	r10, 1
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x364>
 85c:	8b e2       	ldi	r24, 0x2B	; 43
 85e:	01 c0       	rjmp	.+2      	; 0x862 <vfprintf+0x366>
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	a7 fc       	sbrc	r10, 7
 864:	8d e2       	ldi	r24, 0x2D	; 45
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 86e:	89 14       	cp	r8, r9
 870:	38 f4       	brcc	.+14     	; 0x880 <vfprintf+0x384>
 872:	b6 01       	movw	r22, r12
 874:	80 e3       	ldi	r24, 0x30	; 48
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 87c:	9a 94       	dec	r9
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <vfprintf+0x372>
 880:	8a 94       	dec	r8
 882:	f3 01       	movw	r30, r6
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 892:	81 10       	cpse	r8, r1
 894:	f5 cf       	rjmp	.-22     	; 0x880 <vfprintf+0x384>
 896:	22 20       	and	r2, r2
 898:	09 f4       	brne	.+2      	; 0x89c <vfprintf+0x3a0>
 89a:	42 ce       	rjmp	.-892    	; 0x520 <vfprintf+0x24>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f6 cf       	rjmp	.-20     	; 0x896 <vfprintf+0x39a>
 8aa:	f6 01       	movw	r30, r12
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	97 81       	ldd	r25, Z+7	; 0x07
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x3ba>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2b 96       	adiw	r28, 0x0b	; 11
 8b8:	e2 e1       	ldi	r30, 0x12	; 18
 8ba:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__epilogue_restores__>

000008be <strnlen_P>:
 8be:	fc 01       	movw	r30, r24
 8c0:	05 90       	lpm	r0, Z+
 8c2:	61 50       	subi	r22, 0x01	; 1
 8c4:	70 40       	sbci	r23, 0x00	; 0
 8c6:	01 10       	cpse	r0, r1
 8c8:	d8 f7       	brcc	.-10     	; 0x8c0 <strnlen_P+0x2>
 8ca:	80 95       	com	r24
 8cc:	90 95       	com	r25
 8ce:	8e 0f       	add	r24, r30
 8d0:	9f 1f       	adc	r25, r31
 8d2:	08 95       	ret

000008d4 <strnlen>:
 8d4:	fc 01       	movw	r30, r24
 8d6:	61 50       	subi	r22, 0x01	; 1
 8d8:	70 40       	sbci	r23, 0x00	; 0
 8da:	01 90       	ld	r0, Z+
 8dc:	01 10       	cpse	r0, r1
 8de:	d8 f7       	brcc	.-10     	; 0x8d6 <strnlen+0x2>
 8e0:	80 95       	com	r24
 8e2:	90 95       	com	r25
 8e4:	8e 0f       	add	r24, r30
 8e6:	9f 1f       	adc	r25, r31
 8e8:	08 95       	ret

000008ea <fputc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	fb 01       	movw	r30, r22
 8f4:	23 81       	ldd	r18, Z+3	; 0x03
 8f6:	21 fd       	sbrc	r18, 1
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	2c c0       	rjmp	.+88     	; 0x958 <__stack+0x59>
 900:	22 ff       	sbrs	r18, 2
 902:	16 c0       	rjmp	.+44     	; 0x930 <__stack+0x31>
 904:	46 81       	ldd	r20, Z+6	; 0x06
 906:	57 81       	ldd	r21, Z+7	; 0x07
 908:	24 81       	ldd	r18, Z+4	; 0x04
 90a:	35 81       	ldd	r19, Z+5	; 0x05
 90c:	42 17       	cp	r20, r18
 90e:	53 07       	cpc	r21, r19
 910:	44 f4       	brge	.+16     	; 0x922 <__stack+0x23>
 912:	a0 81       	ld	r26, Z
 914:	b1 81       	ldd	r27, Z+1	; 0x01
 916:	9d 01       	movw	r18, r26
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	31 83       	std	Z+1, r19	; 0x01
 91e:	20 83       	st	Z, r18
 920:	8c 93       	st	X, r24
 922:	26 81       	ldd	r18, Z+6	; 0x06
 924:	37 81       	ldd	r19, Z+7	; 0x07
 926:	2f 5f       	subi	r18, 0xFF	; 255
 928:	3f 4f       	sbci	r19, 0xFF	; 255
 92a:	37 83       	std	Z+7, r19	; 0x07
 92c:	26 83       	std	Z+6, r18	; 0x06
 92e:	14 c0       	rjmp	.+40     	; 0x958 <__stack+0x59>
 930:	8b 01       	movw	r16, r22
 932:	ec 01       	movw	r28, r24
 934:	fb 01       	movw	r30, r22
 936:	00 84       	ldd	r0, Z+8	; 0x08
 938:	f1 85       	ldd	r31, Z+9	; 0x09
 93a:	e0 2d       	mov	r30, r0
 93c:	09 95       	icall
 93e:	89 2b       	or	r24, r25
 940:	e1 f6       	brne	.-72     	; 0x8fa <fputc+0x10>
 942:	d8 01       	movw	r26, r16
 944:	16 96       	adiw	r26, 0x06	; 6
 946:	8d 91       	ld	r24, X+
 948:	9c 91       	ld	r25, X
 94a:	17 97       	sbiw	r26, 0x07	; 7
 94c:	01 96       	adiw	r24, 0x01	; 1
 94e:	17 96       	adiw	r26, 0x07	; 7
 950:	9c 93       	st	X, r25
 952:	8e 93       	st	-X, r24
 954:	16 97       	sbiw	r26, 0x06	; 6
 956:	ce 01       	movw	r24, r28
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	08 95       	ret

00000962 <__ultoa_invert>:
 962:	fa 01       	movw	r30, r20
 964:	aa 27       	eor	r26, r26
 966:	28 30       	cpi	r18, 0x08	; 8
 968:	51 f1       	breq	.+84     	; 0x9be <__ultoa_invert+0x5c>
 96a:	20 31       	cpi	r18, 0x10	; 16
 96c:	81 f1       	breq	.+96     	; 0x9ce <__ultoa_invert+0x6c>
 96e:	e8 94       	clt
 970:	6f 93       	push	r22
 972:	6e 7f       	andi	r22, 0xFE	; 254
 974:	6e 5f       	subi	r22, 0xFE	; 254
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	af 4f       	sbci	r26, 0xFF	; 255
 97e:	b1 e0       	ldi	r27, 0x01	; 1
 980:	3e d0       	rcall	.+124    	; 0x9fe <__ultoa_invert+0x9c>
 982:	b4 e0       	ldi	r27, 0x04	; 4
 984:	3c d0       	rcall	.+120    	; 0x9fe <__ultoa_invert+0x9c>
 986:	67 0f       	add	r22, r23
 988:	78 1f       	adc	r23, r24
 98a:	89 1f       	adc	r24, r25
 98c:	9a 1f       	adc	r25, r26
 98e:	a1 1d       	adc	r26, r1
 990:	68 0f       	add	r22, r24
 992:	79 1f       	adc	r23, r25
 994:	8a 1f       	adc	r24, r26
 996:	91 1d       	adc	r25, r1
 998:	a1 1d       	adc	r26, r1
 99a:	6a 0f       	add	r22, r26
 99c:	71 1d       	adc	r23, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	91 1d       	adc	r25, r1
 9a2:	a1 1d       	adc	r26, r1
 9a4:	20 d0       	rcall	.+64     	; 0x9e6 <__ultoa_invert+0x84>
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__ultoa_invert+0x48>
 9a8:	68 94       	set
 9aa:	3f 91       	pop	r19
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	26 9f       	mul	r18, r22
 9b0:	11 24       	eor	r1, r1
 9b2:	30 19       	sub	r19, r0
 9b4:	30 5d       	subi	r19, 0xD0	; 208
 9b6:	31 93       	st	Z+, r19
 9b8:	de f6       	brtc	.-74     	; 0x970 <__ultoa_invert+0xe>
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret
 9be:	46 2f       	mov	r20, r22
 9c0:	47 70       	andi	r20, 0x07	; 7
 9c2:	40 5d       	subi	r20, 0xD0	; 208
 9c4:	41 93       	st	Z+, r20
 9c6:	b3 e0       	ldi	r27, 0x03	; 3
 9c8:	0f d0       	rcall	.+30     	; 0x9e8 <__ultoa_invert+0x86>
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0x5c>
 9cc:	f6 cf       	rjmp	.-20     	; 0x9ba <__ultoa_invert+0x58>
 9ce:	46 2f       	mov	r20, r22
 9d0:	4f 70       	andi	r20, 0x0F	; 15
 9d2:	40 5d       	subi	r20, 0xD0	; 208
 9d4:	4a 33       	cpi	r20, 0x3A	; 58
 9d6:	18 f0       	brcs	.+6      	; 0x9de <__ultoa_invert+0x7c>
 9d8:	49 5d       	subi	r20, 0xD9	; 217
 9da:	31 fd       	sbrc	r19, 1
 9dc:	40 52       	subi	r20, 0x20	; 32
 9de:	41 93       	st	Z+, r20
 9e0:	02 d0       	rcall	.+4      	; 0x9e6 <__ultoa_invert+0x84>
 9e2:	a9 f7       	brne	.-22     	; 0x9ce <__ultoa_invert+0x6c>
 9e4:	ea cf       	rjmp	.-44     	; 0x9ba <__ultoa_invert+0x58>
 9e6:	b4 e0       	ldi	r27, 0x04	; 4
 9e8:	a6 95       	lsr	r26
 9ea:	97 95       	ror	r25
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	ba 95       	dec	r27
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0x86>
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	61 05       	cpc	r22, r1
 9fa:	71 05       	cpc	r23, r1
 9fc:	08 95       	ret
 9fe:	9b 01       	movw	r18, r22
 a00:	ac 01       	movw	r20, r24
 a02:	0a 2e       	mov	r0, r26
 a04:	06 94       	lsr	r0
 a06:	57 95       	ror	r21
 a08:	47 95       	ror	r20
 a0a:	37 95       	ror	r19
 a0c:	27 95       	ror	r18
 a0e:	ba 95       	dec	r27
 a10:	c9 f7       	brne	.-14     	; 0xa04 <__ultoa_invert+0xa2>
 a12:	62 0f       	add	r22, r18
 a14:	73 1f       	adc	r23, r19
 a16:	84 1f       	adc	r24, r20
 a18:	95 1f       	adc	r25, r21
 a1a:	a0 1d       	adc	r26, r0
 a1c:	08 95       	ret

00000a1e <__prologue_saves__>:
 a1e:	2f 92       	push	r2
 a20:	3f 92       	push	r3
 a22:	4f 92       	push	r4
 a24:	5f 92       	push	r5
 a26:	6f 92       	push	r6
 a28:	7f 92       	push	r7
 a2a:	8f 92       	push	r8
 a2c:	9f 92       	push	r9
 a2e:	af 92       	push	r10
 a30:	bf 92       	push	r11
 a32:	cf 92       	push	r12
 a34:	df 92       	push	r13
 a36:	ef 92       	push	r14
 a38:	ff 92       	push	r15
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	ca 1b       	sub	r28, r26
 a48:	db 0b       	sbc	r29, r27
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	09 94       	ijmp

00000a56 <__epilogue_restores__>:
 a56:	2a 88       	ldd	r2, Y+18	; 0x12
 a58:	39 88       	ldd	r3, Y+17	; 0x11
 a5a:	48 88       	ldd	r4, Y+16	; 0x10
 a5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a60:	7d 84       	ldd	r7, Y+13	; 0x0d
 a62:	8c 84       	ldd	r8, Y+12	; 0x0c
 a64:	9b 84       	ldd	r9, Y+11	; 0x0b
 a66:	aa 84       	ldd	r10, Y+10	; 0x0a
 a68:	b9 84       	ldd	r11, Y+9	; 0x09
 a6a:	c8 84       	ldd	r12, Y+8	; 0x08
 a6c:	df 80       	ldd	r13, Y+7	; 0x07
 a6e:	ee 80       	ldd	r14, Y+6	; 0x06
 a70:	fd 80       	ldd	r15, Y+5	; 0x05
 a72:	0c 81       	ldd	r16, Y+4	; 0x04
 a74:	1b 81       	ldd	r17, Y+3	; 0x03
 a76:	aa 81       	ldd	r26, Y+2	; 0x02
 a78:	b9 81       	ldd	r27, Y+1	; 0x01
 a7a:	ce 0f       	add	r28, r30
 a7c:	d1 1d       	adc	r29, r1
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	ed 01       	movw	r28, r26
 a8a:	08 95       	ret

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
