
Exam Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000830  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000906  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00002898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039a  00000000  00000000  00002f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000032d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ds1621_init>:
#include "ds1621.h"

void ds1621_init()
{
	// Set sensor config
	i2c_start_wait(DS1621_adr + I2C_WRITE);
  a6:	80 e9       	ldi	r24, 0x90	; 144
  a8:	0e 94 00 02 	call	0x400	; 0x400 <i2c_start_wait>
	i2c_write(0xAC);
  ac:	8c ea       	ldi	r24, 0xAC	; 172
  ae:	0e 94 34 02 	call	0x468	; 0x468 <i2c_write>
	i2c_write(0x20);
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	0e 94 34 02 	call	0x468	; 0x468 <i2c_write>
	// Start temp conversion
	i2c_rep_start(DS1621_adr + I2C_WRITE);
  b8:	80 e9       	ldi	r24, 0x90	; 144
  ba:	0e 94 28 02 	call	0x450	; 0x450 <i2c_rep_start>
	i2c_write(0xEE);
  be:	8e ee       	ldi	r24, 0xEE	; 238
  c0:	0e 94 34 02 	call	0x468	; 0x468 <i2c_write>
	i2c_stop();
  c4:	0e 94 2b 02 	call	0x456	; 0x456 <i2c_stop>
  c8:	08 95       	ret

000000ca <get_temperature>:
}

double get_temperature() {
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	float temperature;
	unsigned char low_temp_byte;
	unsigned char high_temp_byte;

	// Read the last measured value
	i2c_start_wait(DS1621_adr + I2C_WRITE);
  ce:	80 e9       	ldi	r24, 0x90	; 144
  d0:	0e 94 00 02 	call	0x400	; 0x400 <i2c_start_wait>
	i2c_write(0xAA);
  d4:	8a ea       	ldi	r24, 0xAA	; 170
  d6:	0e 94 34 02 	call	0x468	; 0x468 <i2c_write>

	i2c_rep_start(DS1621_adr + I2C_READ);
  da:	81 e9       	ldi	r24, 0x91	; 145
  dc:	0e 94 28 02 	call	0x450	; 0x450 <i2c_rep_start>
	high_temp_byte = i2c_readAck();
  e0:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_readAck>
  e4:	c8 2f       	mov	r28, r24
	low_temp_byte = i2c_readNak();
  e6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <i2c_readNak>
  ea:	d8 2f       	mov	r29, r24
	i2c_stop();
  ec:	0e 94 2b 02 	call	0x456	; 0x456 <i2c_stop>
	
	if ((high_temp_byte & 0x80)==0) { // temp. >= 0
  f0:	cc 23       	and	r28, r28
  f2:	b4 f0       	brlt	.+44     	; 0x120 <get_temperature+0x56>
		if ((low_temp_byte & 0x80)==0) temperature = high_temp_byte; // no .5
  f4:	dd 23       	and	r29, r29
  f6:	3c f0       	brlt	.+14     	; 0x106 <get_temperature+0x3c>
  f8:	6c 2f       	mov	r22, r28
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__floatunsisf>
 104:	32 c0       	rjmp	.+100    	; 0x16a <get_temperature+0xa0>
		else temperature = high_temp_byte + 0.5;
 106:	6c 2f       	mov	r22, r28
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 01 03 	call	0x602	; 0x602 <__floatsisf>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	5f e3       	ldi	r21, 0x3F	; 63
 11a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__addsf3>
 11e:	25 c0       	rjmp	.+74     	; 0x16a <get_temperature+0xa0>
	}
	else { // temp. < 0
		if ((low_temp_byte & 0x80)==0) { // no .5
 120:	dd 23       	and	r29, r29
 122:	7c f0       	brlt	.+30     	; 0x142 <get_temperature+0x78>
			high_temp_byte = ~high_temp_byte + 1;
			temperature = 0.00 - high_temp_byte;
 124:	6c 2f       	mov	r22, r28
 126:	61 95       	neg	r22
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 01 03 	call	0x602	; 0x602 <__floatsisf>
 132:	9b 01       	movw	r18, r22
 134:	ac 01       	movw	r20, r24
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	cb 01       	movw	r24, r22
 13c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__subsf3>
 140:	14 c0       	rjmp	.+40     	; 0x16a <get_temperature+0xa0>
		}
		else {
			high_temp_byte = ~high_temp_byte;
			temperature = 0.00 - (high_temp_byte+0.5);
 142:	6c 2f       	mov	r22, r28
 144:	60 95       	com	r22
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 01 03 	call	0x602	; 0x602 <__floatsisf>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__addsf3>
 15c:	9b 01       	movw	r18, r22
 15e:	ac 01       	movw	r20, r24
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	cb 01       	movw	r24, r22
 166:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__subsf3>
		}
	}
	return temperature;
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <init_interrupt>:
return(0);
}

void init_interrupt(void)
{
	TCCR2A |= (1<<WGM21);
 170:	e0 eb       	ldi	r30, 0xB0	; 176
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 83       	st	Z, r24
	OCR2A = 0xF9;
 17a:	89 ef       	ldi	r24, 0xF9	; 249
 17c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	TCCR2B |= (1<<CS22);
 180:	e1 eb       	ldi	r30, 0xB1	; 177
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
 18a:	e0 e7       	ldi	r30, 0x70	; 112
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 83       	st	Z, r24
	sei();
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <USART_init>:
}

void USART_init()
{
	//setting up the prescaler
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8); //high byte
 198:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALER); //low byte
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //enable RX and TX channels - sending and receiving data
 1a2:	88 e1       	ldi	r24, 0x18	; 24
 1a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01)); //setting the connection so that there's 1 stop bit, 8 bit data, no parity (the standard)
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 1ae:	08 95       	ret

000001b0 <USART_send>:
}

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //basically you need to send the data one bit at a time. This while loop waits until the port says it is ready to receive the next bit (wait for transmit buffer)
 1b0:	e0 ec       	ldi	r30, 0xC0	; 192
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	95 ff       	sbrs	r25, 5
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <USART_send+0x4>
	UDR0 = data; //puts our new data into the tunnel (data to be sent)
 1ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1be:	08 95       	ret

000001c0 <usart_receive>:
}

unsigned char usart_receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); //wait for new data
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <usart_receive+0x4>
	return UDR0; //received data
 1ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 1ce:	08 95       	ret

000001d0 <main>:

volatile uint8_t pass;

int main(void)
{
	i2c_init();
 1d0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <i2c_init>
	ds1621_init();
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <ds1621_init>
	USART_init();
 1d8:	0e 94 cc 00 	call	0x198	; 0x198 <USART_init>
	
	DDRB |= (1<<PORTB5);
 1dc:	25 9a       	sbi	0x04, 5	; 4
	DDRD = 0xFF;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xF0;
 1e2:	80 ef       	ldi	r24, 0xF0	; 240
 1e4:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x3F;
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x00;
 1ea:	1b b8       	out	0x0b, r1	; 11
		
	curr_temp = get_temperature();
 1ec:	0e 94 65 00 	call	0xca	; 0xca <get_temperature>
 1f0:	0e 94 c9 02 	call	0x592	; 0x592 <__fixsfsi>
 1f4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <curr_temp+0x1>
 1f8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <curr_temp>
	max_temp=curr_temp;
 1fc:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <max_temp+0x1>
 200:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <max_temp>
	min_temp=curr_temp;
 204:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <min_temp+0x1>
 208:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <min_temp>
		
	init_interrupt();
 20c:	0e 94 b8 00 	call	0x170	; 0x170 <init_interrupt>
	
	if(PINC == 0b00111110)
 210:	86 b1       	in	r24, 0x06	; 6
 212:	8e 33       	cpi	r24, 0x3E	; 62
 214:	a1 f4       	brne	.+40     	; 0x23e <main+0x6e>
	{
		 USART_send(100);
 216:	84 e6       	ldi	r24, 0x64	; 100
 218:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
		 key=usart_receive(); //this is blocking the code
 21c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart_receive>
 220:	68 2f       	mov	r22, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <key+0x1>
 228:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <key>
		 eeprom_write_byte((uint8_t *)adrkey, key);
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 95 03 	call	0x72a	; 0x72a <eeprom_write_byte>
		 USART_send(key);
 236:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <key>
 23a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
	}
	
	locked=1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <locked>
	pass = eeprom_read_byte((uint8_t *)adrkey);
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 8d 03 	call	0x71a	; 0x71a <eeprom_read_byte>
 24e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pass>
	
	UCSR0B |= (1<<RXCIE0); //enable interrupts for RXIE
 252:	e1 ec       	ldi	r30, 0xC1	; 193
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	80 83       	st	Z, r24
				if (locked==0)
				{
					PORTD = 0x00;
				}
				else{
					PORTD = 0xF0;
 25c:	c0 ef       	ldi	r28, 0xF0	; 240
	pass = eeprom_read_byte((uint8_t *)adrkey);
	
	UCSR0B |= (1<<RXCIE0); //enable interrupts for RXIE
	while(1)
	{	
				if (locked==0)
 25e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <locked>
 262:	81 11       	cpse	r24, r1
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x9a>
				{
					PORTD = 0x00;
 266:	1b b8       	out	0x0b, r1	; 11
 268:	01 c0       	rjmp	.+2      	; 0x26c <main+0x9c>
				}
				else{
					PORTD = 0xF0;
 26a:	cb b9       	out	0x0b, r28	; 11
				}
				curr_temp=get_temperature();
 26c:	0e 94 65 00 	call	0xca	; 0xca <get_temperature>
 270:	0e 94 c9 02 	call	0x592	; 0x592 <__fixsfsi>
 274:	9b 01       	movw	r18, r22
 276:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <curr_temp+0x1>
 27a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <curr_temp>
				if(curr_temp>max_temp)	max_temp=curr_temp;
 27e:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <max_temp>
 282:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <max_temp+0x1>
 286:	46 17       	cp	r20, r22
 288:	57 07       	cpc	r21, r23
 28a:	24 f4       	brge	.+8      	; 0x294 <main+0xc4>
 28c:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <max_temp+0x1>
 290:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <max_temp>
				if(curr_temp<min_temp)	min_temp=curr_temp;
 294:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <min_temp>
 298:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <min_temp+0x1>
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	f4 f6       	brge	.-68     	; 0x25e <main+0x8e>
 2a2:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <min_temp+0x1>
 2a6:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <min_temp>
 2aa:	d9 cf       	rjmp	.-78     	; 0x25e <main+0x8e>

000002ac <__vector_7>:
	while(!(UCSR0A & (1<<RXC0))); //wait for new data
	return UDR0; //received data
}

ISR (TIMER2_COMPA_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
	ms_counter++;
 2bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ms_counter>
 2c0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ms_counter+0x1>
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ms_counter+0x1>
 2ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ms_counter>
	if (ms_counter==1000)
 2ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ms_counter>
 2d2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ms_counter+0x1>
 2d6:	88 3e       	cpi	r24, 0xE8	; 232
 2d8:	93 40       	sbci	r25, 0x03	; 3
 2da:	41 f4       	brne	.+16     	; 0x2ec <__vector_7+0x40>
	{
		PORTB ^=(1<<PORTB5);
 2dc:	95 b1       	in	r25, 0x05	; 5
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	89 27       	eor	r24, r25
 2e2:	85 b9       	out	0x05, r24	; 5
		ms_counter=0;
 2e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ms_counter+0x1>
 2e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ms_counter>
	}
}
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_18>:

ISR (USART_RX_vect) //this is for sending only
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	1f 92       	push	r1
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char received_data = UDR0;
 328:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 32c:	89 83       	std	Y+1, r24	; 0x01
	if (locked == 0)
 32e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <locked>
 332:	81 11       	cpse	r24, r1
 334:	16 c0       	rjmp	.+44     	; 0x362 <__vector_18+0x66>
	{
		if (received_data == 0) USART_send((uint8_t *)curr_temp);
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	81 11       	cpse	r24, r1
 33a:	04 c0       	rjmp	.+8      	; 0x344 <__vector_18+0x48>
 33c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <curr_temp>
 340:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
		if (received_data == 1) USART_send((uint8_t *)max_temp);
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f4       	brne	.+8      	; 0x352 <__vector_18+0x56>
 34a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <max_temp>
 34e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
		if (received_data == 2) USART_send((uint8_t *)min_temp);
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	99 f4       	brne	.+38     	; 0x37e <__vector_18+0x82>
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <min_temp>
 35c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
 360:	0e c0       	rjmp	.+28     	; 0x37e <__vector_18+0x82>
	}
	else
	{
		if(received_data==pass)
 362:	99 81       	ldd	r25, Y+1	; 0x01
 364:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pass>
 368:	98 13       	cpse	r25, r24
 36a:	06 c0       	rjmp	.+12     	; 0x378 <__vector_18+0x7c>
		{
			locked=0;
 36c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <locked>
			USART_send(0);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
 376:	03 c0       	rjmp	.+6      	; 0x37e <__vector_18+0x82>
		}
		else
		{
			USART_send(255);
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_send>
		}
	}
}
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 3a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  TWBR = ((CPU_CLOCK/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 3aa:	88 e4       	ldi	r24, 0x48	; 72
 3ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 3b0:	08 95       	ret

000003b2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 3b2:	94 ea       	ldi	r25, 0xA4	; 164
 3b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 3b8:	ec eb       	ldi	r30, 0xBC	; 188
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	90 81       	ld	r25, Z
 3be:	99 23       	and	r25, r25
 3c0:	ec f7       	brge	.-6      	; 0x3bc <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 3c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3c6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 3c8:	98 30       	cpi	r25, 0x08	; 8
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <i2c_start+0x1e>
 3cc:	90 31       	cpi	r25, 0x10	; 16
 3ce:	a1 f4       	brne	.+40     	; 0x3f8 <i2c_start+0x46>

	// send device address
	TWDR = address;
 3d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 3d4:	84 e8       	ldi	r24, 0x84	; 132
 3d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 3da:	ec eb       	ldi	r30, 0xBC	; 188
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	ec f7       	brge	.-6      	; 0x3de <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 3e4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 3ea:	98 31       	cpi	r25, 0x18	; 24
 3ec:	39 f0       	breq	.+14     	; 0x3fc <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 34       	cpi	r25, 0x40	; 64
 3f2:	29 f4       	brne	.+10     	; 0x3fe <i2c_start+0x4c>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 3fc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 3fe:	08 95       	ret

00000400 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 404:	ec eb       	ldi	r30, 0xBC	; 188
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 40a:	a9 eb       	ldi	r26, 0xB9	; 185
 40c:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 40e:	cb eb       	ldi	r28, 0xBB	; 187
 410:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 412:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 414:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 416:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 418:	90 81       	ld	r25, Z
 41a:	99 23       	and	r25, r25
 41c:	ec f7       	brge	.-6      	; 0x418 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 41e:	9c 91       	ld	r25, X
 420:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 422:	98 30       	cpi	r25, 0x08	; 8
 424:	11 f0       	breq	.+4      	; 0x42a <i2c_start_wait+0x2a>
 426:	90 31       	cpi	r25, 0x10	; 16
 428:	b1 f7       	brne	.-20     	; 0x416 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 42a:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 42c:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 42e:	90 81       	ld	r25, Z
 430:	99 23       	and	r25, r25
 432:	ec f7       	brge	.-6      	; 0x42e <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 434:	9c 91       	ld	r25, X
 436:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 438:	90 32       	cpi	r25, 0x20	; 32
 43a:	11 f0       	breq	.+4      	; 0x440 <i2c_start_wait+0x40>
 43c:	98 35       	cpi	r25, 0x58	; 88
 43e:	29 f4       	brne	.+10     	; 0x44a <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 440:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 442:	90 81       	ld	r25, Z
 444:	94 fd       	sbrc	r25, 4
 446:	fd cf       	rjmp	.-6      	; 0x442 <i2c_start_wait+0x42>
 448:	e6 cf       	rjmp	.-52     	; 0x416 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 450:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <i2c_start>

}/* i2c_rep_start */
 454:	08 95       	ret

00000456 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 456:	84 e9       	ldi	r24, 0x94	; 148
 458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 45c:	ec eb       	ldi	r30, 0xBC	; 188
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	84 fd       	sbrc	r24, 4
 464:	fd cf       	rjmp	.-6      	; 0x460 <i2c_stop+0xa>

}/* i2c_stop */
 466:	08 95       	ret

00000468 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 468:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 46c:	84 e8       	ldi	r24, 0x84	; 132
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 472:	ec eb       	ldi	r30, 0xBC	; 188
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	88 23       	and	r24, r24
 47a:	ec f7       	brge	.-6      	; 0x476 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 47c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 480:	98 7f       	andi	r25, 0xF8	; 248
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	98 32       	cpi	r25, 0x28	; 40
 486:	09 f4       	brne	.+2      	; 0x48a <i2c_write+0x22>
 488:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 48a:	08 95       	ret

0000048c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 48c:	84 ec       	ldi	r24, 0xC4	; 196
 48e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));    
 492:	ec eb       	ldi	r30, 0xBC	; 188
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	88 23       	and	r24, r24
 49a:	ec f7       	brge	.-6      	; 0x496 <i2c_readAck+0xa>

    return TWDR;
 49c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readAck */
 4a0:	08 95       	ret

000004a2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 4a2:	84 e8       	ldi	r24, 0x84	; 132
 4a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
 4a8:	ec eb       	ldi	r30, 0xBC	; 188
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	88 23       	and	r24, r24
 4b0:	ec f7       	brge	.-6      	; 0x4ac <i2c_readNak+0xa>
	
    return TWDR;
 4b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
 4b6:	08 95       	ret

000004b8 <__subsf3>:
 4b8:	50 58       	subi	r21, 0x80	; 128

000004ba <__addsf3>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	aa 27       	eor	r26, r26
 4be:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__addsf3x>
 4c2:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_round>
 4c6:	0e 94 45 03 	call	0x68a	; 0x68a <__fp_pscA>
 4ca:	38 f0       	brcs	.+14     	; 0x4da <__addsf3+0x20>
 4cc:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_pscB>
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__addsf3+0x20>
 4d2:	39 f4       	brne	.+14     	; 0x4e2 <__addsf3+0x28>
 4d4:	9f 3f       	cpi	r25, 0xFF	; 255
 4d6:	19 f4       	brne	.+6      	; 0x4de <__addsf3+0x24>
 4d8:	26 f4       	brtc	.+8      	; 0x4e2 <__addsf3+0x28>
 4da:	0c 94 42 03 	jmp	0x684	; 0x684 <__fp_nan>
 4de:	0e f4       	brtc	.+2      	; 0x4e2 <__addsf3+0x28>
 4e0:	e0 95       	com	r30
 4e2:	e7 fb       	bst	r30, 7
 4e4:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_inf>

000004e8 <__addsf3x>:
 4e8:	e9 2f       	mov	r30, r25
 4ea:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_split3>
 4ee:	58 f3       	brcs	.-42     	; 0x4c6 <__addsf3+0xc>
 4f0:	ba 17       	cp	r27, r26
 4f2:	62 07       	cpc	r22, r18
 4f4:	73 07       	cpc	r23, r19
 4f6:	84 07       	cpc	r24, r20
 4f8:	95 07       	cpc	r25, r21
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__addsf3x+0x1c>
 4fc:	79 f4       	brne	.+30     	; 0x51c <__addsf3x+0x34>
 4fe:	a6 f5       	brtc	.+104    	; 0x568 <__addsf3x+0x80>
 500:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_zero>
 504:	0e f4       	brtc	.+2      	; 0x508 <__addsf3x+0x20>
 506:	e0 95       	com	r30
 508:	0b 2e       	mov	r0, r27
 50a:	ba 2f       	mov	r27, r26
 50c:	a0 2d       	mov	r26, r0
 50e:	0b 01       	movw	r0, r22
 510:	b9 01       	movw	r22, r18
 512:	90 01       	movw	r18, r0
 514:	0c 01       	movw	r0, r24
 516:	ca 01       	movw	r24, r20
 518:	a0 01       	movw	r20, r0
 51a:	11 24       	eor	r1, r1
 51c:	ff 27       	eor	r31, r31
 51e:	59 1b       	sub	r21, r25
 520:	99 f0       	breq	.+38     	; 0x548 <__addsf3x+0x60>
 522:	59 3f       	cpi	r21, 0xF9	; 249
 524:	50 f4       	brcc	.+20     	; 0x53a <__addsf3x+0x52>
 526:	50 3e       	cpi	r21, 0xE0	; 224
 528:	68 f1       	brcs	.+90     	; 0x584 <__addsf3x+0x9c>
 52a:	1a 16       	cp	r1, r26
 52c:	f0 40       	sbci	r31, 0x00	; 0
 52e:	a2 2f       	mov	r26, r18
 530:	23 2f       	mov	r18, r19
 532:	34 2f       	mov	r19, r20
 534:	44 27       	eor	r20, r20
 536:	58 5f       	subi	r21, 0xF8	; 248
 538:	f3 cf       	rjmp	.-26     	; 0x520 <__addsf3x+0x38>
 53a:	46 95       	lsr	r20
 53c:	37 95       	ror	r19
 53e:	27 95       	ror	r18
 540:	a7 95       	ror	r26
 542:	f0 40       	sbci	r31, 0x00	; 0
 544:	53 95       	inc	r21
 546:	c9 f7       	brne	.-14     	; 0x53a <__addsf3x+0x52>
 548:	7e f4       	brtc	.+30     	; 0x568 <__addsf3x+0x80>
 54a:	1f 16       	cp	r1, r31
 54c:	ba 0b       	sbc	r27, r26
 54e:	62 0b       	sbc	r22, r18
 550:	73 0b       	sbc	r23, r19
 552:	84 0b       	sbc	r24, r20
 554:	ba f0       	brmi	.+46     	; 0x584 <__addsf3x+0x9c>
 556:	91 50       	subi	r25, 0x01	; 1
 558:	a1 f0       	breq	.+40     	; 0x582 <__addsf3x+0x9a>
 55a:	ff 0f       	add	r31, r31
 55c:	bb 1f       	adc	r27, r27
 55e:	66 1f       	adc	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	c2 f7       	brpl	.-16     	; 0x556 <__addsf3x+0x6e>
 566:	0e c0       	rjmp	.+28     	; 0x584 <__addsf3x+0x9c>
 568:	ba 0f       	add	r27, r26
 56a:	62 1f       	adc	r22, r18
 56c:	73 1f       	adc	r23, r19
 56e:	84 1f       	adc	r24, r20
 570:	48 f4       	brcc	.+18     	; 0x584 <__addsf3x+0x9c>
 572:	87 95       	ror	r24
 574:	77 95       	ror	r23
 576:	67 95       	ror	r22
 578:	b7 95       	ror	r27
 57a:	f7 95       	ror	r31
 57c:	9e 3f       	cpi	r25, 0xFE	; 254
 57e:	08 f0       	brcs	.+2      	; 0x582 <__addsf3x+0x9a>
 580:	b0 cf       	rjmp	.-160    	; 0x4e2 <__addsf3+0x28>
 582:	93 95       	inc	r25
 584:	88 0f       	add	r24, r24
 586:	08 f0       	brcs	.+2      	; 0x58a <__addsf3x+0xa2>
 588:	99 27       	eor	r25, r25
 58a:	ee 0f       	add	r30, r30
 58c:	97 95       	ror	r25
 58e:	87 95       	ror	r24
 590:	08 95       	ret

00000592 <__fixsfsi>:
 592:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fixunssfsi>
 596:	68 94       	set
 598:	b1 11       	cpse	r27, r1
 59a:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_szero>
 59e:	08 95       	ret

000005a0 <__fixunssfsi>:
 5a0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fp_splitA>
 5a4:	88 f0       	brcs	.+34     	; 0x5c8 <__fixunssfsi+0x28>
 5a6:	9f 57       	subi	r25, 0x7F	; 127
 5a8:	98 f0       	brcs	.+38     	; 0x5d0 <__fixunssfsi+0x30>
 5aa:	b9 2f       	mov	r27, r25
 5ac:	99 27       	eor	r25, r25
 5ae:	b7 51       	subi	r27, 0x17	; 23
 5b0:	b0 f0       	brcs	.+44     	; 0x5de <__fixunssfsi+0x3e>
 5b2:	e1 f0       	breq	.+56     	; 0x5ec <__fixunssfsi+0x4c>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	1a f0       	brmi	.+6      	; 0x5c4 <__fixunssfsi+0x24>
 5be:	ba 95       	dec	r27
 5c0:	c9 f7       	brne	.-14     	; 0x5b4 <__fixunssfsi+0x14>
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <__fixunssfsi+0x4c>
 5c4:	b1 30       	cpi	r27, 0x01	; 1
 5c6:	91 f0       	breq	.+36     	; 0x5ec <__fixunssfsi+0x4c>
 5c8:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_zero>
 5cc:	b1 e0       	ldi	r27, 0x01	; 1
 5ce:	08 95       	ret
 5d0:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_zero>
 5d4:	67 2f       	mov	r22, r23
 5d6:	78 2f       	mov	r23, r24
 5d8:	88 27       	eor	r24, r24
 5da:	b8 5f       	subi	r27, 0xF8	; 248
 5dc:	39 f0       	breq	.+14     	; 0x5ec <__fixunssfsi+0x4c>
 5de:	b9 3f       	cpi	r27, 0xF9	; 249
 5e0:	cc f3       	brlt	.-14     	; 0x5d4 <__fixunssfsi+0x34>
 5e2:	86 95       	lsr	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b3 95       	inc	r27
 5ea:	d9 f7       	brne	.-10     	; 0x5e2 <__fixunssfsi+0x42>
 5ec:	3e f4       	brtc	.+14     	; 0x5fc <__fixunssfsi+0x5c>
 5ee:	90 95       	com	r25
 5f0:	80 95       	com	r24
 5f2:	70 95       	com	r23
 5f4:	61 95       	neg	r22
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	08 95       	ret

000005fe <__floatunsisf>:
 5fe:	e8 94       	clt
 600:	09 c0       	rjmp	.+18     	; 0x614 <__floatsisf+0x12>

00000602 <__floatsisf>:
 602:	97 fb       	bst	r25, 7
 604:	3e f4       	brtc	.+14     	; 0x614 <__floatsisf+0x12>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	99 23       	and	r25, r25
 616:	a9 f0       	breq	.+42     	; 0x642 <__floatsisf+0x40>
 618:	f9 2f       	mov	r31, r25
 61a:	96 e9       	ldi	r25, 0x96	; 150
 61c:	bb 27       	eor	r27, r27
 61e:	93 95       	inc	r25
 620:	f6 95       	lsr	r31
 622:	87 95       	ror	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f1 11       	cpse	r31, r1
 62c:	f8 cf       	rjmp	.-16     	; 0x61e <__floatsisf+0x1c>
 62e:	fa f4       	brpl	.+62     	; 0x66e <__floatsisf+0x6c>
 630:	bb 0f       	add	r27, r27
 632:	11 f4       	brne	.+4      	; 0x638 <__floatsisf+0x36>
 634:	60 ff       	sbrs	r22, 0
 636:	1b c0       	rjmp	.+54     	; 0x66e <__floatsisf+0x6c>
 638:	6f 5f       	subi	r22, 0xFF	; 255
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	16 c0       	rjmp	.+44     	; 0x66e <__floatsisf+0x6c>
 642:	88 23       	and	r24, r24
 644:	11 f0       	breq	.+4      	; 0x64a <__floatsisf+0x48>
 646:	96 e9       	ldi	r25, 0x96	; 150
 648:	11 c0       	rjmp	.+34     	; 0x66c <__floatsisf+0x6a>
 64a:	77 23       	and	r23, r23
 64c:	21 f0       	breq	.+8      	; 0x656 <__floatsisf+0x54>
 64e:	9e e8       	ldi	r25, 0x8E	; 142
 650:	87 2f       	mov	r24, r23
 652:	76 2f       	mov	r23, r22
 654:	05 c0       	rjmp	.+10     	; 0x660 <__floatsisf+0x5e>
 656:	66 23       	and	r22, r22
 658:	71 f0       	breq	.+28     	; 0x676 <__floatsisf+0x74>
 65a:	96 e8       	ldi	r25, 0x86	; 134
 65c:	86 2f       	mov	r24, r22
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	2a f0       	brmi	.+10     	; 0x66e <__floatsisf+0x6c>
 664:	9a 95       	dec	r25
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	da f7       	brpl	.-10     	; 0x664 <__floatsisf+0x62>
 66e:	88 0f       	add	r24, r24
 670:	96 95       	lsr	r25
 672:	87 95       	ror	r24
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret

00000678 <__fp_inf>:
 678:	97 f9       	bld	r25, 7
 67a:	9f 67       	ori	r25, 0x7F	; 127
 67c:	80 e8       	ldi	r24, 0x80	; 128
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	08 95       	ret

00000684 <__fp_nan>:
 684:	9f ef       	ldi	r25, 0xFF	; 255
 686:	80 ec       	ldi	r24, 0xC0	; 192
 688:	08 95       	ret

0000068a <__fp_pscA>:
 68a:	00 24       	eor	r0, r0
 68c:	0a 94       	dec	r0
 68e:	16 16       	cp	r1, r22
 690:	17 06       	cpc	r1, r23
 692:	18 06       	cpc	r1, r24
 694:	09 06       	cpc	r0, r25
 696:	08 95       	ret

00000698 <__fp_pscB>:
 698:	00 24       	eor	r0, r0
 69a:	0a 94       	dec	r0
 69c:	12 16       	cp	r1, r18
 69e:	13 06       	cpc	r1, r19
 6a0:	14 06       	cpc	r1, r20
 6a2:	05 06       	cpc	r0, r21
 6a4:	08 95       	ret

000006a6 <__fp_round>:
 6a6:	09 2e       	mov	r0, r25
 6a8:	03 94       	inc	r0
 6aa:	00 0c       	add	r0, r0
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__fp_round+0xc>
 6ae:	88 23       	and	r24, r24
 6b0:	52 f0       	brmi	.+20     	; 0x6c6 <__fp_round+0x20>
 6b2:	bb 0f       	add	r27, r27
 6b4:	40 f4       	brcc	.+16     	; 0x6c6 <__fp_round+0x20>
 6b6:	bf 2b       	or	r27, r31
 6b8:	11 f4       	brne	.+4      	; 0x6be <__fp_round+0x18>
 6ba:	60 ff       	sbrs	r22, 0
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <__fp_round+0x20>
 6be:	6f 5f       	subi	r22, 0xFF	; 255
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__fp_split3>:
 6c8:	57 fd       	sbrc	r21, 7
 6ca:	90 58       	subi	r25, 0x80	; 128
 6cc:	44 0f       	add	r20, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	59 f0       	breq	.+22     	; 0x6e8 <__fp_splitA+0x10>
 6d2:	5f 3f       	cpi	r21, 0xFF	; 255
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <__fp_splitA+0x1a>
 6d6:	47 95       	ror	r20

000006d8 <__fp_splitA>:
 6d8:	88 0f       	add	r24, r24
 6da:	97 fb       	bst	r25, 7
 6dc:	99 1f       	adc	r25, r25
 6de:	61 f0       	breq	.+24     	; 0x6f8 <__fp_splitA+0x20>
 6e0:	9f 3f       	cpi	r25, 0xFF	; 255
 6e2:	79 f0       	breq	.+30     	; 0x702 <__fp_splitA+0x2a>
 6e4:	87 95       	ror	r24
 6e6:	08 95       	ret
 6e8:	12 16       	cp	r1, r18
 6ea:	13 06       	cpc	r1, r19
 6ec:	14 06       	cpc	r1, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	f2 cf       	rjmp	.-28     	; 0x6d6 <__fp_split3+0xe>
 6f2:	46 95       	lsr	r20
 6f4:	f1 df       	rcall	.-30     	; 0x6d8 <__fp_splitA>
 6f6:	08 c0       	rjmp	.+16     	; 0x708 <__fp_splitA+0x30>
 6f8:	16 16       	cp	r1, r22
 6fa:	17 06       	cpc	r1, r23
 6fc:	18 06       	cpc	r1, r24
 6fe:	99 1f       	adc	r25, r25
 700:	f1 cf       	rjmp	.-30     	; 0x6e4 <__fp_splitA+0xc>
 702:	86 95       	lsr	r24
 704:	71 05       	cpc	r23, r1
 706:	61 05       	cpc	r22, r1
 708:	08 94       	sec
 70a:	08 95       	ret

0000070c <__fp_zero>:
 70c:	e8 94       	clt

0000070e <__fp_szero>:
 70e:	bb 27       	eor	r27, r27
 710:	66 27       	eor	r22, r22
 712:	77 27       	eor	r23, r23
 714:	cb 01       	movw	r24, r22
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret

0000071a <eeprom_read_byte>:
 71a:	f9 99       	sbic	0x1f, 1	; 31
 71c:	fe cf       	rjmp	.-4      	; 0x71a <eeprom_read_byte>
 71e:	92 bd       	out	0x22, r25	; 34
 720:	81 bd       	out	0x21, r24	; 33
 722:	f8 9a       	sbi	0x1f, 0	; 31
 724:	99 27       	eor	r25, r25
 726:	80 b5       	in	r24, 0x20	; 32
 728:	08 95       	ret

0000072a <eeprom_write_byte>:
 72a:	26 2f       	mov	r18, r22

0000072c <eeprom_write_r18>:
 72c:	f9 99       	sbic	0x1f, 1	; 31
 72e:	fe cf       	rjmp	.-4      	; 0x72c <eeprom_write_r18>
 730:	1f ba       	out	0x1f, r1	; 31
 732:	92 bd       	out	0x22, r25	; 34
 734:	81 bd       	out	0x21, r24	; 33
 736:	20 bd       	out	0x20, r18	; 32
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	fa 9a       	sbi	0x1f, 2	; 31
 73e:	f9 9a       	sbi	0x1f, 1	; 31
 740:	0f be       	out	0x3f, r0	; 63
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
