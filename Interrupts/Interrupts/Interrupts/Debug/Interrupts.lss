
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072c  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a2  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027f  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_interrupt>:
}

void set_light(unsigned int amount_of_ms)
{
	PORTD = 0xF0;
	ms_counter = amount_of_ms;
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 bd       	out	0x24, r24	; 36
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	87 bd       	out	0x27, r24	; 39
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
  ba:	78 94       	sei
  bc:	85 b5       	in	r24, 0x25	; 37
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	85 bd       	out	0x25, r24	; 37
  c2:	08 95       	ret

000000c4 <main>:
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	1b b8       	out	0x0b, r1	; 11
  ca:	80 ef       	ldi	r24, 0xF0	; 240
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <init_interrupt>
  d6:	90 ef       	ldi	r25, 0xF0	; 240
  d8:	28 ee       	ldi	r18, 0xE8	; 232
  da:	33 e0       	ldi	r19, 0x03	; 3
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	8e 33       	cpi	r24, 0x3E	; 62
  e0:	e9 f7       	brne	.-6      	; 0xdc <main+0x18>
  e2:	9b b9       	out	0x0b, r25	; 11
  e4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_end+0x1>
  e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <main+0x18>

000000ee <__vector_14>:
}

ISR (TIMER0_COMPA_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25

	if (ms_counter==0)
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 104:	89 2b       	or	r24, r25
 106:	11 f4       	brne	.+4      	; 0x10c <__vector_14+0x1e>
	{
		PORTD = 0x00;
 108:	1b b8       	out	0x0b, r1	; 11
 10a:	09 c0       	rjmp	.+18     	; 0x11e <__vector_14+0x30>
	}
	else ms_counter--;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
