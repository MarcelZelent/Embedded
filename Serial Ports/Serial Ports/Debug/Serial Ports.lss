
Serial Ports.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d8  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000709  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000096  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 00 	call	0xce	; 0xce <main>
  9e:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:
}*/

void USART_init()
{ 
	//setting up the prescaler
	UBRR0H = (uint8_t)(BAUD_PRESCALER>>8); //high byte
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALER); //low byte
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //enable RX and TX channels - sending and receiving data
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01)); //setting the connection so that there's 1 stop bit, 8 bit data, no parity (the standard)
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  bc:	08 95       	ret

000000be <USART_send>:
}

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //basically you need to send the data one bit at a time. This while loop waits until the port says it is ready to receive the next bit (wait for transmit buffer)
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART_send+0x4>
	UDR0 = data; //puts our new data into the tunnel (data to be sent)
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  cc:	08 95       	ret

000000ce <main>:
void USART_init();
void USART_send(unsigned char);

int main(void)
{ 
	DDRC = 0xF0; //pc0-3 inputs
  ce:	80 ef       	ldi	r24, 0xF0	; 240
  d0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x3F;// pullups
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	88 b9       	out	0x08, r24	; 8
	  
	USART_init();  
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
	  
    while (1) 
    {
		if(PINC == 0b00111110) //button 1 is pressed - send value 1
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	8e 33       	cpi	r24, 0x3E	; 62
  de:	19 f4       	brne	.+6      	; 0xe6 <main+0x18>
			{
				USART_send(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_send>
			}
		if(PINC == 0b00111101) //button 2 is pressed - send value 2
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	8d 33       	cpi	r24, 0x3D	; 61
  ea:	19 f4       	brne	.+6      	; 0xf2 <main+0x24>
			{
				USART_send(2);
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_send>
			}
		if(PINC == 0b00111011) //button 3 is pressed - send value 3
  f2:	86 b1       	in	r24, 0x06	; 6
  f4:	8b 33       	cpi	r24, 0x3B	; 59
  f6:	19 f4       	brne	.+6      	; 0xfe <main+0x30>
			{
				USART_send(3);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_send>
			}
		if(PINC == 0b00110111) //button 4 is pressed - send value 4
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	87 33       	cpi	r24, 0x37	; 55
 102:	19 f4       	brne	.+6      	; 0x10a <main+0x3c>
			{
				USART_send(4);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	85 ea       	ldi	r24, 0xA5	; 165
 10e:	9e e0       	ldi	r25, 0x0E	; 14
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x42>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x4c>
 11a:	00 00       	nop
 11c:	de cf       	rjmp	.-68     	; 0xda <main+0xc>

0000011e <__vector_18>:
	while(!(UCSR0A & (1<<UDRE0))); //basically you need to send the data one bit at a time. This while loop waits until the port says it is ready to receive the next bit (wait for transmit buffer)
	UDR0 = data; //puts our new data into the tunnel (data to be sent)
}

ISR (USART_RX_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <__vector_18+0x18>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char received_data = UDR0;
 13a:	e6 ec       	ldi	r30, 0xC6	; 198
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char received_data_2 = UDR0; // this will actually be equal to 0, because the buffer is empty already
 142:	80 81       	ld	r24, Z
 144:	8a 83       	std	Y+2, r24	; 0x02
	if (received_data == 1) PORTD ^=0b00010000;
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	21 f4       	brne	.+8      	; 0x154 <__vector_18+0x36>
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	89 27       	eor	r24, r25
 152:	8b b9       	out	0x0b, r24	; 11
	if (received_data == 2) PORTD ^=0b00100000;
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	21 f4       	brne	.+8      	; 0x162 <__vector_18+0x44>
 15a:	9b b1       	in	r25, 0x0b	; 11
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	89 27       	eor	r24, r25
 160:	8b b9       	out	0x0b, r24	; 11
	if (received_data == 3) PORTD ^=0b01000000;
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	21 f4       	brne	.+8      	; 0x170 <__vector_18+0x52>
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	89 27       	eor	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
	if (received_data == 4) PORTD ^=0b10000000;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	19 f4       	brne	.+6      	; 0x17c <__vector_18+0x5e>
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
